### YamlMime:Tutorial
title: Prozkoumejte C# 6 - C# interaktivní C# kurz
metadata:
  title: Prozkoumejte C# 6 – vyzkoušejte si nové funkce v C# 6 interaktivně, pomocí prohlížeče
  description: V tomto kurzu použijete prohlížeč k prozkoumání C# 6 interaktivně. Prozkoumáte nové idiomy můžete používat s C# 6, která umožňují stručnější a čitelnější kód.
  audience: Developer
  level: intermediate
  ms.date: 12/11/2018
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: d782899c3b29851f020cd9fc07cde8f408bf2ac5
  ms.sourcegitcommit: 6b308cf6d627d78ee36dbbae8972a310ac7fd6c8
  ms.translationtype: MT
  ms.contentlocale: cs-CZ
  ms.lasthandoff: 01/23/2019
  ms.locfileid: "54634256"
items:
- durationInMinutes: 1
  content: >
    V tomto kurzu vám umožňuje zkoumat C# 6 interaktivně, pomocí prohlížeče k zápisu C# a zobrazovat výsledky kompilace a spuštění kódu. Obsahuje sérii lekcí, které upravují dříve C# postupy při práci s novějšími, stručnější C# 6 funkce. Zbývající část tohoto článku poskytuje přehled o každé z těchto funkcí s odkazem k prozkoumání jednotlivých funkcí.
- title: Povolit automatické – vlastnosti jen pro čtení typy jen pro čtení
  durationInMinutes: 2
  content: "Dvě vylepšení automatickou vlastnost syntaxe usnadnit používání automatické vlastnosti na více místech: Inicializátory automatické vlastnosti a auto vlastnosti jen pro čtení. Vezměte v úvahu Tento malý program:\n\n[!code-csharp[Starter](../../../../samples/csharp/tutorials/exploration/csharp6-starter/Program.cs)]  \n\n    \n Zahájit detailní režim, zkopírujte předchozí kód do C# interaktivního okna. Potom klikněte na *spustit* chcete zobrazit, co kód dělá. `AllCaps` má nežádoucí vedlejší účinek změnu hodnoty vlastností spolu se vrací řetězec velká písmena. Autor `Person` třídy určené řetězce pro `FirstName` a `LastName` bude jen pro čtení. S C# 6, můžete provést tohoto záměru vymazat. Odeberte `private set` z obou vlastností pro vytvoření vlastnosti jen pro čtení automaticky. Klikněte na tlačítko *spustit* zobrazíte, že kompilátor míst těmito dvěma umístěními kde `FirstName` a `LastName` vlastností se při by neměl mít se změní. Můžete změnit `AllCaps` metody následující kód, chcete-li vyřešit chybu kompilátoru:\n\n```csharp\npublic string AllCaps()\n{\n  return ToString().ToUpper();\n}\n```\n\nPomocí této nové syntaxe, kompilátor pak zajistí, že jsou neměnné vlastnosti.\n"
- title: Inicializovat pole zálohování pro automatické vlastnosti
  durationInMinutes: 1
  content: "V nové syntaxi C# 6 umožňuje používat inicializátory pro automatické vlastnosti. To je více důležité nové funkce růstem třídy. Přidat vlastnost křestní jméno a nový konstruktor, který přijímá tři řetězce pro vaše `Person` třídy:\n\n[!code-csharp[MiddleName](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#MiddleName)]  \n\nPřiřazení `MiddleName` vlastnost je inicializátor. Inicializuje pole vygenerovaný kompilátorem zálohování pro křestní jméno.\n"
- title: Členové tvoření výrazy
  durationInMinutes: 2
  content: >
    Členové tvoření poskytují nenáročném syntaxi pro zjednodušené metody. `Person` Třída má dva skvělými kandidáty. Podívejte se na deklarace `ToString`:


    ```csharp

    public override string ToString()

    {
        return FirstName + " " + LastName;
    }

    ```


    Nahraďte tuto deklaraci `ToString` následujícím kódem:


    ```csharp

    public override string ToString() => FirstName + " " + LastName;

    ```


    Zkuste stejné až `Caps` metody. Toto je malá vylepšení, ale při použití uvážlivě vytvoří mnohem čitelnější kód, zejména pro objekty přenosu dat (DTO) a dalších typů s minimálními chování.
- title: Import jednu třídu
  durationInMinutes: 2
  content: "Pokud opakovaně používají statické metody jednu třídu v rámci kódu, včetně názvu třídy pokaždé, když zakrývá význam kódu. `Person` Třídy aktuálně importy `System` obor názvů, i když jediný <xref:System.Console?displayProperty=nameWithType> se používá. Upravit `using` příkaz následujícím způsobem:\n\n[!code-csharp[MiddleName](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#UsingStatic)]  \n\n`static using` Příkazu stane další užitečné ve větších programů, které usnadňují příliš často používá jednu třídu s mnoha statické metody, stejně jako [ `string` ](xref:System.String) třídy nebo <xref:System.Math?displayProperty=nameWithType> třídy.\n"
- title: Lepší formát řetězce
  durationInMinutes: 2
  content: "C# 6 obsahuje novou syntaxi pro vytvoření řetězce z řetězce a vložené výrazy, které jsou vyhodnocovány vytvoří další hodnoty řetězce. Můžete změnit `ToString` a `AllCaps` metody použijte následující syntaxi:\n\n[!code-csharp[StringInterpolation](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#StringInterpolation)]  \n\nMísto poziční argumenty mezi `{` a `}`, psaní C# výrazy přímo. Můžete provést totéž `Main` metody. Nahraďte stávající kód následujícím kódem:\n\n[!code-csharp[InterpolationMain](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#InterpolationMain)]  \n\nNejste omezeni pouze do jedné proměnné v těchto výrazech. Můžeme začít s novou příklad a upravte je tak prokázat dalších výrazů, které můžete použít s interpolace řetězců. Vložte následující kód do interaktivního okna v `Main` metody:\n\n[!code-csharp[Phrases](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#Phrases)]  \n\nMůžete odebrat místní proměnná `average` a tomuto výpočtu jako součást interpolovaný řetězcový výraz. Nahraďte poslední dva řádky s následujícími možnostmi:\n\n```csharp\nWriteLine($\"The average word length is: {wordLength.Average()}\");\n```\n\nSpuštěný v předchozím příkladu, jehož ekvivalent byste našli, který ve výstupu `Average` má další desetinná místa, než byste chtěli. Syntaxe interpolace řetězce podporuje všechny na formát řetězce k dispozici pomocí dříve formátování metod. Můžete zadat řetězec formátu uvnitř složených závorek. Přidat `:` následující výraz, který má formát:\n\n```csharp\nWriteLine($\"The average word length is: {wordLength.Average():F2}\");\n```\n"
- title: Rychlé a snadné kontroly hodnoty null
  durationInMinutes: 2
  content: "`?.` – Operátor (null podmíněné) usnadňuje psaní logiky, která přebírá `null` hodnoty v úvahu bez problémů, bez dalších `if` kontroluje. Prozkoumejte funkci, začněte tak, že zkopírujete následující kód do interaktivního okna můžete vyzkoušet:\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n      string s = null;\n      Console.WriteLine(s.Length);\n    }\n}\n```\n\nVyvolá <xref:System.NullReferenceException> při spuštění ukázky. Změnit `.` operátor přístupu členů k **null podmiňovací operátor**:\n\n```csharp\nConsole.WriteLine(s?.Length);\n``` \n\nPo této změně neexistuje žádný výstup. Důvodem je, že výsledek `s?.Length` je `int?` když výsledek `s.Length` je `int`. V tomto příkladu `s?.Length` je `null`. `?.` Vrátí `null` -li levý operand `null`. Pokud typ pravý operand je typu hodnoty `?.` operátor vrátí typu pro daný typ s možnou hodnotou Null. Kromě `?.` můžete použít `?[]` pro přístup k poli nebo indexeru. Vyzkoušejte v interaktivním okně následující kód:\n\n ```csharp\n char? c = s?[0];\n Console.WriteLine(c.HasValue);\n ```\n\n Je možné kombinovat více podmíněných operátorů do jediného výrazu. A `null` vytvoří operandu vlevo `null` výsledek, vám usnadní vyhnout vnořené, pokud klauzule pro přístup ke členům členů. Zkuste například následující kód v interaktivním okně:\n\n ```csharp\n string s = null;\n bool? hasMore = s?.ToCharArray()?.GetEnumerator()?.MoveNext();\n Console.WriteLine(hasMore.HasValue);\n ```\n\n V předchozím příkladu se dá zjednodušit pomocí **null operátor sloučení** poskytnutí výchozí hodnoty:\n\n ```csharp\n bool hasMore = s?.ToCharArray()?.GetEnumerator()?.MoveNext() ?? false;\n Console.WriteLine(hasMore);\n ```\n\n **Null podmiňovací operátor** pomáhá psát kód, který provede základní logiku vymazat při testování bez problémů `null` hodnoty.\n"
- title: Filtry výjimek
  durationInMinutes: 2
  content: "Filtry výjimek umožňují zachytit výjimku na základě některé podmínky. Typické použití je vytvořit filtr metodu, která protokoluje výjimky, ale nikdy zpracovává tyto výjimky. Filtr výjimek je logický výraz, který je `true` při `catch` klauzule by měla být spuštěna, a `false` při by neměl být zachycena výjimka `catch` klauzuli. Vyzkoušejte v interaktivním okně následující kód: Zaznamenává typ výjimky a zprávu do konzoly. Vrátí `false` což znamená, že výjimky nelze zpracovat. Zkuste program v interaktivním okně.\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        try \n        {\n            string s = null;\n            Console.WriteLine(s.Length);\n\n        } catch (Exception e) when (LogException(e))\n        {\n        }\n        Console.WriteLine(\"Exception must have been handled\");\n    }\n\n    private static bool LogException(Exception e)\n    {\n        Console.WriteLine($\"\\tIn the log routine. Caught {e.GetType()}\");\n        Console.WriteLine($\"\\tMessage: {e.Message}\");\n        return false;\n    }\n}\n```\n\nZobrazí se zpráva z `LogException` metoda, za nímž následuje výchozí zpráva o výjimce. Pouze můžete experimentovat, změnit `return false` příkazu `return true` a spusťte znovu. Nyní je výjimka zachycena a program se spustí do konce.\n\nNad rámec scénáře protokolování může být filtry výjimek nejužitečnější, pokud vlastnost výjimky určuje, jaká akce se má provést. Můžete se třeba podívat uvnitř <xref:System.AggregateException> zobrazíte o obsažené výjimky a provést některé příslušnou akci v závislosti na specifické výjimky.\n"
- title: Pomocí nameof
  durationInMinutes: 2
  content: "`nameof` Operátor vrátí název jakoukoli proměnnou, typ nebo člen typu. Vyzkoušejte následující kód v interaktivním okně, abyste viděli, jak funguje:\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        Console.WriteLine(nameof(System.String));\n        int j = 5;\n        Console.WriteLine(nameof(j));\n        List<string> names = new List<string>();\n        Console.WriteLine(nameof(names));\n    }\n}\n```\n\nVýstup odpovídá názvu proměnné nebo typu. I když jste zadali plně kvalifikovaného názvu (například `System.String`) `nameof` operátor vrátí neúplný název. Tato funkce je nejužitečnější, když budete chtít převést na řetězec, parametr nebo vlastnost název. Mezi příklady patří zachytávání název argumentu pro vyvolávání <xref:System.ArgumentNullException> nebo <xref:System.ArgumentException>, nebo zaznamenání název změněné vlastnosti při implementaci <xref:System.ComponentModel.INotifyPropertyChanged>. \n"
- title: Syntaxe inicializace nového objektu
  durationInMinutes: 2
  content: "Inicializace nového objektu umožňuje vytvářet metody, které usnadňují inicializovat slovníky a dalších typů. Začněte s slovník. Spusťte v interaktivním okně následující kód:\n\n```csharp\nvar messages = new Dictionary<int, string>\n{\n    [404] = \"Page not Found\",\n    [302] = \"Page moved, but left a forwarding address.\",\n    [500] = \"The web server can't come out to play today.\"\n};\n\nConsole.WriteLine(messages[302]);\n```\n\nMůžete rozšířit na jakoukoli třídu, která implementuje Tato syntaxe <xref:System.Collections.IEnumerable> a je veřejně přístupný `Add` metody.  Vyzkoušejte následující ukázka v interaktivním okně. Vytvoří `Path` třídu, která implementuje `IEnumerable<Point3D>` a nemá metodu přidat bodů, která má tři argumenty. Kombinuje také další metody už jsme vám ukázali v tomto kurzu, jako je například členové tvoření a interpolace řetězců. \n\nV `Main` metody inicializace cestu poskytnutím souřadnice pro body. Tyto body jsou přidána do kolekce prostřednictvím `Add` metody.\n\n`Add` Metoda může být také metody rozšíření. V předchozím příkladu může aktualizovat následujícím způsobem. Tato ukázka nezkompiluje v interaktivním prostředí kvůli omezením izolovaného prostoru. Můžete je vyzkoušejte na vlastním počítači.\n\n```csharp\npublic class Path : IEnumerable<Point3D>\n{\n    private List<Point3D> points = new List<Point3D>();\n    public IEnumerator<Point3D> GetEnumerator() => points.GetEnumerator();\n    IEnumerator IEnumerable.GetEnumerator() => points.GetEnumerator();\n\n    public void Add(Point3D pt) => points.Add(pt);\n}\n\npublic static class Extensions\n{\n    public static void Add(this Path path, double x, double y, double z) => path.Add(new Point3D(x, y, z));\n}\n```\n"
- content: Dokončili jste průzkumu o nových funkcích v C# 6. Teď vyzkoušejte si je sami ve svých aplikacích.
