### YamlMime:Tutorial
title: <span data-ttu-id="bd327-101">Prozkoumejte C# 6 - C# interaktivní C# kurz</span><span class="sxs-lookup"><span data-stu-id="bd327-101">Explore C# 6 - C# interactive C# tutorial</span></span>
metadata:
  title: Prozkoumejte C# 6 – vyzkoušejte si nové funkce v C# 6 interaktivně, pomocí prohlížeče
  description: V tomto kurzu použijete prohlížeč k prozkoumání C# 6 interaktivně. Prozkoumáte nové idiomy můžete používat s C# 6, která umožňují stručnější a čitelnější kód.
  audience: Developer
  level: intermediate
  ms.date: 12/11/2018
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: b43400a0fdae338744c521cf7ddb2bfce79fc43c
  ms.sourcegitcommit: c4e9d05644c9cb89de5ce6002723de107ea2e2c4
  ms.translationtype: MT
  ms.contentlocale: cs-CZ
  ms.lasthandoff: 05/19/2019
  ms.locfileid: "65881024"
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="bd327-105">V tomto kurzu vám umožňuje zkoumat C# 6 interaktivně, pomocí prohlížeče k zápisu C# a zobrazovat výsledky kompilace a spuštění kódu.</span><span class="sxs-lookup"><span data-stu-id="bd327-105">This tutorial lets you explore C# 6 interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id="bd327-106">Obsahuje sérii lekcí, které upravují dříve C# postupy při práci s novějšími, stručnější C# 6 funkce.</span><span class="sxs-lookup"><span data-stu-id="bd327-106">It contains a series of lessons that modify earlier C# practices to use newer, more concise C# 6 features.</span></span> <span data-ttu-id="bd327-107">Zbývající část tohoto článku poskytuje přehled o každé z těchto funkcí s odkazem k prozkoumání jednotlivých funkcí.</span><span class="sxs-lookup"><span data-stu-id="bd327-107">The rest of this article provides an overview of each of these features, with a link to explore each feature.</span></span>
- title: <span data-ttu-id="bd327-108">Povolit automatické – vlastnosti jen pro čtení typy jen pro čtení</span><span class="sxs-lookup"><span data-stu-id="bd327-108">Read-only auto-properties enable read-only types</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"bd327-109\">Dvě vylepšení automatickou vlastnost syntaxe usnadnit používání automatické vlastnosti na více místech: Inicializátory automatické vlastnosti a auto vlastnosti jen pro čtení.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-109\">Two enhancements to auto-property syntax make it easier to use auto-properties in more places: read-only auto-properties and auto-property initializers.</span></span> <span data-ttu-id=\"bd327-110\">Vezměte v úvahu Tento malý program:</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-110\">Consider this small program:</span></span>\n\n[!code-csharp[Starter](../../../../samples/csharp/tutorials/exploration/csharp6-starter/Program.cs)]  \n\n    \n <span data-ttu-id=\"bd327-111\">Zahájit detailní režim, zkopírujte předchozí kód do C# interaktivního okna.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-111\">Enter Focus mode, copy the preceding code into the C# interactive window.</span></span> <span data-ttu-id=\"bd327-112\">Potom klikněte na *spustit* chcete zobrazit, co kód dělá.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-112\">Then, click *Run* to see what the code does.</span></span> <span data-ttu-id=\"bd327-113\">`AllCaps` má nežádoucí vedlejší účinek změnu hodnoty vlastností spolu se vrací řetězec velká písmena.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-113\">`AllCaps` has the undesirable side effect of modifying the property values along with returning the uppercase string.</span></span> <span data-ttu-id=\"bd327-114\">Autor `Person` třídy určené řetězce pro `FirstName` a `LastName` bude jen pro čtení.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-114\">The author of the `Person` class intended the strings for `FirstName` and `LastName` to be read-only.</span></span> <span data-ttu-id=\"bd327-115\">S C# 6, můžete provést tohoto záměru vymazat.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-115\">With C# 6, you can make that intent clear.</span></span> <span data-ttu-id=\"bd327-116\">Odeberte `private set` z obou vlastností pro vytvoření vlastnosti jen pro čtení automaticky.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-116\">Remove the `private set` from both properties to create a read-only auto property.</span></span> <span data-ttu-id=\"bd327-117\">Klikněte na tlačítko *spustit* zobrazíte, že kompilátor míst těmito dvěma umístěními kde `FirstName` a `LastName` vlastností se při by neměl mít se změní.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-117\">Click *Run* to see that the compiler spots the two locations where the `FirstName` and `LastName` properties are changed when they should not have been.</span></span> <span data-ttu-id=\"bd327-118\">Můžete změnit `AllCaps` metody následující kód, chcete-li vyřešit chybu kompilátoru:</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-118\">You can change the `AllCaps` method to the following code to fix the compiler error:</span></span>\n\n```csharp\npublic string AllCaps()\n{\n  return ToString().ToUpper();\n}\n```\n\n<span data-ttu-id=\"bd327-119\">Pomocí této nové syntaxe, kompilátor pak zajistí, že jsou neměnné vlastnosti.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-119\">Using this new syntax, the compiler ensures that the properties are immutable.</span></span>\n"
- title: <span data-ttu-id="bd327-120">Inicializovat pole zálohování pro automatické vlastnosti</span><span class="sxs-lookup"><span data-stu-id="bd327-120">Initialize backing fields for auto-properties</span></span>
  durationInMinutes: 1
  content: "<span data-ttu-id=\"bd327-121\">V nové syntaxi C# 6 umožňuje používat inicializátory pro automatické vlastnosti.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-121\">New syntax in C# 6 enables you to use initializers for auto-properties.</span></span> <span data-ttu-id=\"bd327-122\">To je více důležité nové funkce růstem třídy.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-122\">This becomes more important as classes grow new capabilities.</span></span> <span data-ttu-id=\"bd327-123\">Přidat vlastnost křestní jméno a nový konstruktor, který přijímá tři řetězce pro vaše `Person` třídy:</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-123\">Add a middle name property, and a new constructor that takes three strings to your `Person` class:</span></span>\n\n[!code-csharp[MiddleName](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#MiddleName)]  \n\n<span data-ttu-id=\"bd327-124\">Přiřazení `MiddleName` vlastnost je inicializátor.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-124\">The assignment on the `MiddleName` property is an initializer.</span></span> <span data-ttu-id=\"bd327-125\">Inicializuje pole vygenerovaný kompilátorem zálohování pro křestní jméno.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-125\">It initializes the compiler-generated backing field for the middle name.</span></span>\n"
- title: <span data-ttu-id="bd327-126">Členové tvoření výrazy</span><span class="sxs-lookup"><span data-stu-id="bd327-126">Expression-bodied members</span></span>
  durationInMinutes: 2
  content: >
    <span data-ttu-id="bd327-127">Členové tvoření poskytují nenáročném syntaxi pro zjednodušené metody.</span><span class="sxs-lookup"><span data-stu-id="bd327-127">Expression-bodied members provide a lightweight syntax for lightweight methods.</span></span> <span data-ttu-id="bd327-128">`Person` Třída má dva skvělými kandidáty.</span><span class="sxs-lookup"><span data-stu-id="bd327-128">The `Person` class has two great candidates.</span></span> <span data-ttu-id="bd327-129">Podívejte se na deklarace `ToString`:</span><span class="sxs-lookup"><span data-stu-id="bd327-129">Look at the declaration of `ToString`:</span></span>


    ```csharp

    public override string ToString()

    {
        return FirstName + " " + LastName;
    }

    ```


    <span data-ttu-id="bd327-130">Nahraďte tuto deklaraci `ToString` následujícím kódem:</span><span class="sxs-lookup"><span data-stu-id="bd327-130">Replace that declaration of `ToString` with the following code:</span></span>


    ```csharp

    public override string ToString() => FirstName + " " + LastName;

    ```


    <span data-ttu-id="bd327-131">Zkuste stejné až `AllCaps` metody.</span><span class="sxs-lookup"><span data-stu-id="bd327-131">Try the same with the `AllCaps` method.</span></span> <span data-ttu-id="bd327-132">Toto je malá vylepšení, ale při použití uvážlivě vytvoří mnohem čitelnější kód, zejména pro objekty přenosu dat (DTO) a dalších typů s minimálními chování.</span><span class="sxs-lookup"><span data-stu-id="bd327-132">This is a small improvement, but when used wisely it creates much more readable code, especially for Data Transfer Objects (DTOs) and other types with minimal behavior.</span></span>
- title: <span data-ttu-id="bd327-133">Import jednu třídu</span><span class="sxs-lookup"><span data-stu-id="bd327-133">Importing a single class</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"bd327-134\">Pokud opakovaně používají statické metody jednu třídu v rámci kódu, včetně názvu třídy pokaždé, když zakrývá význam kódu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-134\">If you repeatedly use one class' static methods throughout your code, including the class name each time obscures the meaning of your code.</span></span> <span data-ttu-id=\"bd327-135\">`Person` Třídy aktuálně importy `System` obor názvů, i když jediný <xref:System.Console?displayProperty=nameWithType> se používá.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-135\">The `Person` class currently imports the `System` namespace, even though only <xref:System.Console?displayProperty=nameWithType> is used.</span></span> <span data-ttu-id=\"bd327-136\">Upravit `using` příkaz následujícím způsobem:</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-136\">Modify the `using` statement as follows:</span></span>\n\n[!code-csharp[MiddleName](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#UsingStatic)]  \n\n<span data-ttu-id=\"bd327-137\">`static using` Příkazu stane další užitečné ve větších programů, které usnadňují příliš často používá jednu třídu s mnoha statické metody, stejně jako [ `string` ](xref:System.String) třídy nebo <xref:System.Math?displayProperty=nameWithType> třídy.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-137\">The `static using` statement becomes more useful in larger programs that make extensive use of a single class with many static methods, like the [`string`](xref:System.String) class or the <xref:System.Math?displayProperty=nameWithType> class.</span></span>\n"
- title: <span data-ttu-id="bd327-138">Lepší formát řetězce</span><span class="sxs-lookup"><span data-stu-id="bd327-138">A better string format</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"bd327-139\">C# 6 obsahuje novou syntaxi pro vytvoření řetězce z řetězce a vložené výrazy, které jsou vyhodnocovány vytvoří další hodnoty řetězce.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-139\">C# 6 contains new syntax for composing strings from a string and embedded expressions that are evaluated to produce other string values.</span></span> <span data-ttu-id=\"bd327-140\">Můžete změnit `ToString` a `AllCaps` metody použijte následující syntaxi:</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-140\">You can change the `ToString` and `AllCaps` methods to use this syntax:</span></span>\n\n[!code-csharp[StringInterpolation](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#StringInterpolation)]  \n\n<span data-ttu-id=\"bd327-141\">Místo poziční argumenty mezi `{` a `}`, psaní C# výrazy přímo.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-141\">Instead of positional arguments between the `{` and `}`, you write C# expressions directly.</span></span> <span data-ttu-id=\"bd327-142\">Můžete provést totéž `Main` metody.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-142\">You can do the same in the `Main` method.</span></span> <span data-ttu-id=\"bd327-143\">Nahraďte stávající kód následujícím kódem:</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-143\">Replace the existing code with the following:</span></span>\n\n[!code-csharp[InterpolationMain](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#InterpolationMain)]  \n\n<span data-ttu-id=\"bd327-144\">Nejste omezeni pouze do jedné proměnné v těchto výrazech.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-144\">You're not limited to a single variable in these expressions.</span></span> <span data-ttu-id=\"bd327-145\">Můžeme začít s novou příklad a upravte je tak prokázat dalších výrazů, které můžete použít s interpolace řetězců.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-145\">Let's start with a new example and modify it to demonstrate other expressions you can use with string interpolation.</span></span> <span data-ttu-id=\"bd327-146\">Vložte následující kód do interaktivního okna v `Main` metody:</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-146\">Paste the following code into the interactive window in the `Main` method:</span></span>\n\n[!code-csharp[Phrases](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#Phrases)]  \n\n<span data-ttu-id=\"bd327-147\">Můžete odebrat místní proměnná `average` a tomuto výpočtu jako součást interpolovaný řetězcový výraz.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-147\">You can remove the local variable `average` and perform that calculation as part of the interpolated string expression.</span></span> <span data-ttu-id=\"bd327-148\">Nahraďte poslední dva řádky s následujícími možnostmi:</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-148\">Replace the last two lines with the following:</span></span>\n\n```csharp\nWriteLine($\"The average word length is: {wordLength.Average()}\");\n```\n\n<span data-ttu-id=\"bd327-149\">Spuštěný v předchozím příkladu, jehož ekvivalent byste našli, který ve výstupu `Average` má další desetinná místa, než byste chtěli.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-149\">Running the preceding example, you would find that the output for `Average` has more decimal places than you would like.</span></span> <span data-ttu-id=\"bd327-150\">Syntaxe interpolace řetězce podporuje všechny na formát řetězce k dispozici pomocí dříve formátování metod.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-150\">The string interpolation syntax supports all the format strings available using earlier formatting methods.</span></span> <span data-ttu-id=\"bd327-151\">Můžete zadat řetězec formátu uvnitř složených závorek.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-151\">You specify the format string inside the braces.</span></span> <span data-ttu-id=\"bd327-152\">Přidat `:` následující výraz, který má formát:</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-152\">Add a `:` following the expression to format:</span></span>\n\n```csharp\nWriteLine($\"The average word length is: {wordLength.Average():F2}\");\n```\n"
- title: <span data-ttu-id="bd327-153">Rychlé a snadné kontroly hodnoty null</span><span class="sxs-lookup"><span data-stu-id="bd327-153">Quick and easy null checks</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"bd327-154\">`?.` – Operátor (null podmíněné) usnadňuje psaní logiky, která přebírá `null` hodnoty v úvahu bez problémů, bez dalších `if` kontroluje.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-154\">The `?.` (null conditional) operator makes it easier to write logic that takes `null` values into account seamlessly, without extra `if` checks.</span></span> <span data-ttu-id=\"bd327-155\">Prozkoumejte funkci, začněte tak, že zkopírujete následující kód do interaktivního okna můžete vyzkoušet:</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-155\">To explore the feature, start by copying the following code into the interactive window to try it:</span></span>\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n      string s = null;\n      Console.WriteLine(s.Length);\n    }\n}\n```\n\n<span data-ttu-id=\"bd327-156\">Vyvolá <xref:System.NullReferenceException> při spuštění ukázky.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-156\">It throws a <xref:System.NullReferenceException> when you run the sample.</span></span> <span data-ttu-id=\"bd327-157\">Změnit `.` operátor přístupu členů k **null podmiňovací operátor**:</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-157\">Change the `.` member access operator to the **null conditional operator**:</span></span>\n\n```csharp\nConsole.WriteLine(s?.Length);\n``` \n\n<span data-ttu-id=\"bd327-158\">Po této změně neexistuje žádný výstup.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-158\">After this change, there's no output.</span></span> <span data-ttu-id=\"bd327-159\">Důvodem je, že výsledek `s?.Length` je `int?` když výsledek `s.Length` je `int`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-159\">That's because the result of `s?.Length` is an `int?` when the result of `s.Length` is an `int`.</span></span> <span data-ttu-id=\"bd327-160\">V tomto příkladu `s?.Length` je `null`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-160\">In this example, `s?.Length` is `null`.</span></span> <span data-ttu-id=\"bd327-161\">`?.` Vrátí `null` -li levý operand `null`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-161\">The `?.` returns `null` if its left operand is `null`.</span></span> <span data-ttu-id=\"bd327-162\">Pokud typ pravý operand je typu hodnoty `?.` operátor vrátí typu pro daný typ s možnou hodnotou Null.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-162\">If the type of the right operand is a value type, the `?.` operator returns a nullable type for that type.</span></span> <span data-ttu-id=\"bd327-163\">Kromě `?.` můžete použít `?[]` pro přístup k poli nebo indexeru.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-163\">In addition to `?.` you can use `?[]` for array or indexer access.</span></span> <span data-ttu-id=\"bd327-164\">Vyzkoušejte v interaktivním okně následující kód:</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-164\">Try the following code in the interactive window:</span></span>\n\n ```csharp\n char? c = s?[0];\n Console.WriteLine(c.HasValue);\n ```\n\n <span data-ttu-id=\"bd327-165\">Je možné kombinovat více podmíněných operátorů do jediného výrazu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-165\">Multiple conditional operators can be combined into a single expression.</span></span> <span data-ttu-id=\"bd327-166\">A `null` vytvoří operandu vlevo `null` výsledek, vám usnadní vyhnout vnořené, pokud klauzule pro přístup ke členům členů.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-166\">A `null` left operand produces a `null` result, making it easy to avoid nested if clauses to access members of members.</span></span> <span data-ttu-id=\"bd327-167\">Zkuste například následující kód v interaktivním okně:</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-167\">For example, try the following code in the interactive window:</span></span>\n\n ```csharp\n string s = null;\n bool? hasMore = s?.ToCharArray()?.GetEnumerator()?.MoveNext();\n Console.WriteLine(hasMore.HasValue);\n ```\n\n <span data-ttu-id=\"bd327-168\">V předchozím příkladu se dá zjednodušit pomocí **null operátor sloučení** poskytnutí výchozí hodnoty:</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-168\">The preceding example can be simplified by using the **null coalescing operator** to provide a default value:</span></span>\n\n ```csharp\n bool hasMore = s?.ToCharArray()?.GetEnumerator()?.MoveNext() ?? false;\n Console.WriteLine(hasMore);\n ```\n\n <span data-ttu-id=\"bd327-169\">**Null podmiňovací operátor** pomáhá psát kód, který provede základní logiku vymazat při testování bez problémů `null` hodnoty.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-169\">The **null conditional operator** helps you write code that makes your core logic clear while seamlessly testing for `null` values.</span></span>\n"
- title: <span data-ttu-id="bd327-170">Filtry výjimek</span><span class="sxs-lookup"><span data-stu-id="bd327-170">Exception filters</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"bd327-171\">Filtry výjimek umožňují zachytit výjimku na základě některé podmínky.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-171\">Exception filters enable you to catch an exception based on some condition.</span></span> <span data-ttu-id=\"bd327-172\">Typické použití je vytvořit filtr metodu, která protokoluje výjimky, ale nikdy zpracovává tyto výjimky.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-172\">A typical use is to create a filter method that logs exceptions, but never handles those exceptions.</span></span> <span data-ttu-id=\"bd327-173\">Filtr výjimek je logický výraz, který je `true` při `catch` klauzule by měla být spuštěna, a `false` při by neměl být zachycena výjimka `catch` klauzuli.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-173\">An exception filter is a boolean expression that is `true` when the `catch` clause should be executed, and `false` when the exception should not be caught by the `catch` clause.</span></span> <span data-ttu-id=\"bd327-174\">Vyzkoušejte v interaktivním okně následující kód: Zaznamenává typ výjimky a zprávu do konzoly.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-174\">Try the following code in the interactive window: It logs the exception type and message to the console.</span></span> <span data-ttu-id=\"bd327-175\">Vrátí `false` což znamená, že výjimky nelze zpracovat.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-175\">It returns `false` which indicates that the exception can't be handled.</span></span> <span data-ttu-id=\"bd327-176\">Zkuste program v interaktivním okně.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-176\">Try the program in the interactive window.</span></span>\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        try \n        {\n            string s = null;\n            Console.WriteLine(s.Length);\n\n        } catch (Exception e) when (LogException(e))\n        {\n        }\n        Console.WriteLine(\"Exception must have been handled\");\n    }\n\n    private static bool LogException(Exception e)\n    {\n        Console.WriteLine($\"\\tIn the log routine. Caught {e.GetType()}\");\n        Console.WriteLine($\"\\tMessage: {e.Message}\");\n        return false;\n    }\n}\n```\n\n<span data-ttu-id=\"bd327-177\">Zobrazí se zpráva z `LogException` metoda, za nímž následuje výchozí zpráva o výjimce.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-177\">You should see the message from the `LogException` method, followed by the default exception message.</span></span> <span data-ttu-id=\"bd327-178\">Pouze můžete experimentovat, změnit `return false` příkazu `return true` a spusťte znovu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-178\">Just to experiment, change the `return false` statement to `return true` and run this again.</span></span> <span data-ttu-id=\"bd327-179\">Nyní je výjimka zachycena a program se spustí do konce.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-179\">Now, the exception is caught and the program runs to completion.</span></span>\n\n<span data-ttu-id=\"bd327-180\">Nad rámec scénáře protokolování může být filtry výjimek nejužitečnější, pokud vlastnost výjimky určuje, jaká akce se má provést.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-180\">Beyond logging scenarios, exception filters can be most useful when a property of the exception determines what action to take.</span></span> <span data-ttu-id=\"bd327-181\">Můžete se třeba podívat uvnitř <xref:System.AggregateException> zobrazíte o obsažené výjimky a provést některé příslušnou akci v závislosti na specifické výjimky.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-181\">For example, you can look inside an <xref:System.AggregateException> to see what the contained exceptions are and take some appropriate action depending on the specific exception.</span></span>\n"
- title: <span data-ttu-id="bd327-182">Pomocí nameof</span><span class="sxs-lookup"><span data-stu-id="bd327-182">Using nameof</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"bd327-183\">`nameof` Operátor vrátí název jakoukoli proměnnou, typ nebo člen typu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-183\">The `nameof` operator returns the name of any variable, a type, or a type's member.</span></span> <span data-ttu-id=\"bd327-184\">Vyzkoušejte následující kód v interaktivním okně, abyste viděli, jak funguje:</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-184\">Try the following code in the interactive window to see how it works:</span></span>\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        Console.WriteLine(nameof(System.String));\n        int j = 5;\n        Console.WriteLine(nameof(j));\n        List<string> names = new List<string>();\n        Console.WriteLine(nameof(names));\n    }\n}\n```\n\n<span data-ttu-id=\"bd327-185\">Výstup odpovídá názvu proměnné nebo typu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-185\">The output matches the name of the variable or type.</span></span> <span data-ttu-id=\"bd327-186\">I když jste zadali plně kvalifikovaného názvu (například `System.String`) `nameof` operátor vrátí neúplný název.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-186\">Even when you provided the fully qualified type name (such as `System.String`) the `nameof` operator returns the unqualified name.</span></span> <span data-ttu-id=\"bd327-187\">Tato funkce je nejužitečnější, když budete chtít převést na řetězec, parametr nebo vlastnost název.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-187\">This feature is most useful when you need to convert a parameter or property name to a string.</span></span> <span data-ttu-id=\"bd327-188\">Mezi příklady patří zachytávání název argumentu pro vyvolávání <xref:System.ArgumentNullException> nebo <xref:System.ArgumentException>, nebo zaznamenání název změněné vlastnosti při implementaci <xref:System.ComponentModel.INotifyPropertyChanged>.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-188\">Examples include capturing the name of an argument for throwing a <xref:System.ArgumentNullException> or <xref:System.ArgumentException>, or capturing the name of a changed property when implementing <xref:System.ComponentModel.INotifyPropertyChanged>.</span></span> \n"
- title: <span data-ttu-id="bd327-189">Syntaxe inicializace nového objektu</span><span class="sxs-lookup"><span data-stu-id="bd327-189">New object initialization syntax</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"bd327-190\">Syntaxe inicializátoru objektu teď podporuje inicializaci *indexery* a také vlastnosti a pole.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-190\">Object initializer syntax now supports initializing *indexers* as well as properties and fields.</span></span> <span data-ttu-id=\"bd327-191\">Toto přidání usnadňuje inicializovat slovníky a dalších typů.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-191\">This addition makes it easier to initialize dictionaries and other types.</span></span> <span data-ttu-id=\"bd327-192\">Začněte s slovník.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-192\">Start with a dictionary.</span></span> <span data-ttu-id=\"bd327-193\">Spusťte v interaktivním okně následující kód:</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-193\">Run the following code in the interactive window:</span></span>\n\n```csharp\nvar messages = new Dictionary<int, string>\n{\n    [404] = \"Page not Found\",\n    [302] = \"Page moved, but left a forwarding address.\",\n    [500] = \"The web server can't come out to play today.\"\n};\n\nConsole.WriteLine(messages[302]);\n```\n\n<span data-ttu-id=\"bd327-194\">Tato syntaxe, která nastaví hodnotu v indexeru, lze použít pro libovolný typ, který má přistupující objekt dostupná sada pro indexovacího člena.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-194\">This syntax, which sets a value in an indexer, can be used for any type that has an accessible set accessor on an indexer.</span></span>\n\n<span data-ttu-id=\"bd327-195\">Druhý změnu usnadňuje povolení syntaxe inicializátoru pro typy, které představují sekvence.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-195\">A second change makes it easier to enable initializer syntax for types that represent sequences.</span></span> <span data-ttu-id=\"bd327-196\">Inicializátory kolekce jde použít na všechny třídy, která implementuje <xref:System.Collections.IEnumerable> a je veřejně přístupný `Add` metody.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-196\">Collection initializers can be used on any class that implements <xref:System.Collections.IEnumerable> and has a publicly accessible `Add` method.</span></span> <span data-ttu-id=\"bd327-197\">Že `Add` metoda může být nyní metody rozšíření.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-197\">That `Add` method can now be an extension method.</span></span> \n\n<span data-ttu-id=\"bd327-198\">Následující příklad ukazuje jeden scénář pro tuto syntaxi.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-198\">The following example shows one scenario for this syntax.</span></span> <span data-ttu-id=\"bd327-199\">Vytvoří `Path` třídu, která implementuje `IEnumerable<Point3D>` a nemá metodu přidat body, které přijímají tři argumenty.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-199\">It creates a `Path` class that implements `IEnumerable<Point3D>` and has a method to add points that take three arguments.</span></span> <span data-ttu-id=\"bd327-200\">`Extensions` Třída vytvoří další `Add` metoda pro přidání nového bodu z jeho tři komponenty.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-200\">The `Extensions` class creates an additional `Add` method to add a new point from its three components.</span></span> <span data-ttu-id=\"bd327-201\">Tato ukázka nespouští aktuálně interaktivně z důvodu omezení v prostředí.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd327-201\">This sample does not currently run interactively due to restrictions in the environment.</span></span>\n\n```csharp\npublic class Path : IEnumerable<Point3D>\n{\n    private List<Point3D> points = new List<Point3D>();\n    public IEnumerator<Point3D> GetEnumerator() => points.GetEnumerator();\n    IEnumerator IEnumerable.GetEnumerator() => points.GetEnumerator();\n\n    public void Add(Point3D pt) => points.Add(pt);\n}\n\npublic static class Extensions\n{\n    public static void Add(this Path path, double x, double y, double z) => path.Add(new Point3D(x, y, z));\n}\n```\n"
- content: <span data-ttu-id="bd327-202">Dokončili jste průzkumu o nových funkcích v C# 6.</span><span class="sxs-lookup"><span data-stu-id="bd327-202">You've completed an exploration of the new features in C# 6.</span></span> <span data-ttu-id="bd327-203">Teď vyzkoušejte si je sami ve svých aplikacích.</span><span class="sxs-lookup"><span data-stu-id="bd327-203">Now try them yourself in your applications.</span></span>
