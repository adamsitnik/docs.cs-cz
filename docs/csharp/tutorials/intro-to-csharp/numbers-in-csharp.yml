### YamlMime:Tutorial
title: Čísla s plovoucí desetinnou čárkou a integrální bod v manipulaci sC#
metadata:
  title: Čísla v C# – Úvod do C# Interaktivní kurz
  description: V tomto kurzu o typech čísel se budete pomocí prohlížeče učit C# interaktivně. Budete psát kód v C# a zobrazovat výsledky kompilace a spuštění prohlédnete přímo v prohlížeči.
  audience: Developer
  ms.custom: mvc
  ms.date: 08/24/2018
  level: Beginner
  nextTutorialHref: branches-and-loops.yml
  nextTutorialTitle: Větve a smyčky v C#
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 1475941e0b0169566307f016d68ef3c3cb0b907c
  ms.sourcegitcommit: 3b9b7ae6771712337d40374d2fef6b25b0d53df6
  ms.translationtype: MT
  ms.contentlocale: cs-CZ
  ms.lasthandoff: 01/04/2019
  ms.locfileid: "54029733"
items:
- durationInMinutes: 1
  content: >
    V tomto kurzu se dozvíte, jaké typy čísel v C# interaktivně, pomocí prohlížeče k zápisu C# a zobrazovat výsledky kompilace a spuštění kódu. Obsahuje sérii lekcí, které se zabývají čísly a matematickými operacemi v C#. Tato lekce vás naučí základy jazyka C#.
- title: Prozkoumejte matematikou celých čísel
  durationInMinutes: 4
  content: >
    Spusťte v interaktivním okně následující kód. K tomu, zadejte do interaktivního okna následující blok kódu a klikněte na tlačítko **spustit** tlačítka:


    ```csharp

    int a = 18;

    int b = 6;

    int c = a + b;

    Console.WriteLine(c);

    ```


    Právě jste viděli jednu ze základních matematických operací s celými čísly. `int` Zadejte představuje **celé číslo**, kladné nebo záporné celé číslo. Můžete použít `+` symbol pro přidání. Dalším běžným matematickým operacím pro celá čísla zahrnují:


    - `-` pro odčítání

    - `*` pro násobení

    - `/` pro dělení


    > [!TIP]

    > V celém tomto interaktivním kurzu můžete prozkoumat na vlastní pěst a upravovat kód, který jste napsali v interaktivním okně. Tento kurz obsahuje příklady, které můžete v každém kroku vyzkoušet.


    Nejdřív si vyzkoušejte uvedené operace. Třetí řádek pro každou z těchto operací. Zkuste změnit. Po každé úpravě klikněte na tlačítko **spustit** tlačítko.


    Odčítání:


    ```csharp

    int c = a - b;

    ```


    Násobení:


    ```csharp

    int c = a * b;

    ```


    Dělení:


    ```csharp

    int c = a / b;

    ```


    Můžete taky experimentovat a provést několik matematických operací na jednom řádku, pokud byste o ni.


    > [!TIP]

    > Když se budete učit, C# (nebo libovolným programovacím jazykem), budete se při psaní kódu dělat chyby. **Kompilátoru** se tyto chyby odhalí a dejte nám o nich na vás. Pokud výstup obsahuje chybové zprávy, prohlédněte si blíže ukázkový kód a kód v interaktivním okně, abyste zjistili, co je opravit.

    > Toto cvičení vám pomůže seznámit se se strukturou kódu jazyka C#.


    > [!NOTE]

    > Toto online kódovací prostředí je v režimu náhledu. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Seznámení s pořadím operací
  durationInMinutes: 7
  content: >
    Jazyk C# definuje prioritu různých matematických operací pravidla souladu se stejnými pravidly, že jste se naučili v matematice.

    Úlohy násobení a dělení přednost před sčítáním a odčítáním.

    Vyzkoušejte si to spuštěním následujícího kódu v interaktivním okně:


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = a + b * c;

    Console.WriteLine(d);

    ```


    Z výstupu vyplývá, operace násobení se provede dřív než operace sčítání.


    Jiné pořadí operací můžete vynutit závorek uzavřením operace nebo operací, které chcete provést jako první:


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = (a + b) * c;

    Console.WriteLine(d);

    ```


    Teď prozkoumáme i další kombinací několika různých operací. Čtvrtý řádek výše nahraďte vypadat přibližně takto:


    ```csharp

    int d = (a + b) - 6 * c + (12 * 4) / 3 + 12;

    ```


    Mohli jste si všimnout zvláštního chování pro celá čísla. Dělení celého čísla vždy vytváří celé číslo výsledku, i když byste očekávali bude výsledek obsahovat desetinné nebo zlomkové části.


    Pokud toto chování nezaznamenali, zkuste následující:


    ```csharp

    int a = 7;

    int b = 4;

    int c = 3;

    int d = (a  + b) / c;

    Console.WriteLine(d);

    ```


    Klikněte na tlačítko **spustit** znovu, abyste viděli výsledek.


    > [!NOTE]

    > Toto online kódovací prostředí je v režimu náhledu. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Prozkoumat celé číslo přesnosti a omezení
  durationInMinutes: 5
  content: >
    Z poslední ukázky vám ukázal, že dělení celého čísla zkrátí výsledek.

    Můžete získat **zbývající** pomocí **modulo** operátoru `%` znak:


    ```csharp

    int a = 7;

    int b = 4;

    int c = 3;

    int d = (a  + b) / c;

    int e = (a + b) % c;

    Console.WriteLine($"quotient: {d}");

    Console.WriteLine($"remainder: {e}");

    ```


    Typ integer jazyka C# se liší od matematické celých čísel v jednom ohledu: `int` typ má minimální a maximální mezí. Tento kód spusťte v interaktivním okně, abyste tyto limity zjistíte:


    ```csharp

    int max = int.MaxValue;

    int min = int.MinValue;

    Console.WriteLine($"The range of integers is {min} to {max}");

    ```


    Pokud výsledkem určitého výpočtu hodnota, která tyto limity překračuje, máte **podtečení** nebo **přetečení** podmínku. Zobrazí se odpověď cyklicky přechází od jednoho limitu k druhému. Přidejte následující dva řádky do interaktivního okna k prohlédnutí příkladu:


    ```csharp

    int what = max + 3;

    Console.WriteLine($"An example of overflow: {what}");

    ```


    Všimněte si, že odpověď těsně blíží minimální (zápornému) celému číslu. Je stejný jako `min + 2`.

    Operace sčítání **došlo k přetečení** povolené hodnoty celých čísel.

    Odpověď je velmi velké záporné číslo, protože přetečení "cyklickému přechodu" od nejvyšší možné celočíselné hodnoty k nejnižší.


    Existují další číselné typy s různými limity a přesností, můžete použít, pokud `int` typu nevyhovuje vašim potřebám. Podíváme se na ně podívat.


    > [!NOTE]

    > Toto online kódovací prostředí je v režimu náhledu. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Práce s typem double
  durationInMinutes: 5
  content: >
    `double` Číselného typu představuje číslo s plovoucí desetinnou dvojitou přesností. Tyto výrazy možná pro vás nová. A **s plovoucí desetinnou čárkou** číslo slouží k reprezentaci jiných než celých čísel, která může být velmi velké nebo velmi vysoká. **Dvojité přesnosti** znamená, že tato čísla ukládají s větší přesností než **jednoduchou přesností**. V moderních počítačích se častěji používají s dvojitou přesností než čísla a jednoduchou přesností.

    Zkusíme zjistit. Vyzkoušet v interaktivním okně následující kód a zobrazit výsledek:


    ```csharp

    double a = 5;

    double b = 4;

    double c = 2;

    double d = (a  + b) / c;

    Console.WriteLine(d);

    ```


    Všimněte si, že odpověď obsahuje desetinnou část podílu. Try – o něco složitější výraz s čísly typu Double:


    ```csharp

    double a = 19;

    double b = 23;

    double c = 8;

    double d = (a  + b) / c;

    Console.WriteLine(d);

    ```


    Rozsah hodnoty double je mnohem větší než u hodnot typu integer. Vyzkoušejte v interaktivním okně následující kód:


    ```csharp

    double max = double.MaxValue;

    double min = double.MinValue;

    Console.WriteLine($"The range of double is {min} to {max}");

    ```


    Tyto hodnoty jsou vytiskne zapsaný exponenciální notací. Číslo vlevo od `E` se říká mantisa. Exponent, je číslo vpravo jako mocninu 10.


    Stejně jako desetinná čísla v matematice můžou mít typu Double v C# chyby zaokrouhlení. Vyzkoušejte tento kód:


    ```csharp

    double third = 1.0 / 3.0;

    Console.WriteLine(third);

    ```


    Víte, že `0.3` periodických přesně neodpovídá stejný jako `1/3`.


    ***Výzvy***


    Vyzkoušejte si různé výpočty s velkým, malé čísly, násobením a dělením za použití `double` typu.  Zkuste složitější výpočty.


    > [!NOTE]

    > Toto online kódovací prostředí je v režimu náhledu. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Práce s typy s pevnou desetinnou čárkou
  durationInMinutes: 8
  content: >
    Seznámili jste se základními typy čísel v jazyce C#: celými čísly a čísly typu Double.  Existuje jeden další typ: `decimal` typu. `decimal` Má menší rozsah, ale zato větší přesnost než typ `double`. Termín **Pevná desetinná** znamená, že desetinné čárky (nebo řádová) čárka nepohybuje. Podívejme se na to:


    ```csharp

    decimal min = decimal.MinValue;

    decimal max = decimal.MaxValue;

    Console.WriteLine($"The range of the decimal type is {min} to {max}");

    ```


    Všimněte si, že je rozsah menší, než `double` typu. Větší přesnost typu decimal můžete zobrazit pomocí následujícího kódu:


    ```csharp

    double a = 1.0;

    double b = 3.0;

    Console.WriteLine(a / b);


    decimal c = 1.0M;

    decimal d = 3.0M;

    Console.WriteLine(c / d);

    ```


    `M` Přípona u čísel je způsob, jak naznačit, že má konstanta používat `decimal` typu.


    Všimněte si, že výsledek s typem decimal má napravo od desetinné čárky víc číslic.


    ***Výzvy***


    Teď, když jste se seznámili s různými typy čísel, psát kód, který vypočítá obsah kruhu s poloměrem 2,50 centimetru. Mějte na paměti, že obsah kruhu je jako poloměr na druhou krát číslo PÍ. Jeden pomocný parametr: .NET obsahuje pro číslo PÍ konstantu <xref:System.Math.PI?displayProperty=nameWithType> , můžete použít pro tuto hodnotu.


    > [!NOTE]

    > Toto online kódovací prostředí je v režimu náhledu. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).


    By vám vyjít výsledek mezi 19 a 20.
- title: Dokončení výzvy
  durationInMinutes: 1
  content: >
    Napsali jste kód podobný tomuto?


    ```csharp

    double radius = 2.50;

    double area = Math.PI * radius * radius;

    Console.WriteLine(area);

    ```


    Pokud chcete, vyzkoušejte i další vzorce.


    > [!NOTE]

    > Toto online kódovací prostředí je v režimu náhledu. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- content: >
    Dokončili jste "čísla v C#" interaktivního kurzu. Můžete kliknout **větve a smyčky** odkaz níže spusťte další interaktivní kurz, nebo můžete navštívit [.NET Web](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial) stáhnout .NET Core SDK, vytvořte projekt na vašem počítači a zachovat kódování. Krok "Zachovat učení" přináší zpět do těchto kurzů.


    Další informace o číslech v jazyce C# v následujících tématech:


    - [Tabulka celočíselných typů](../../language-reference/keywords/integral-types-table.md)

    - [Tabulka typů s plovoucí desetinnou čárkou](../../language-reference/keywords/floating-point-types-table.md)

    - [Tabulka předdefinovaných typů](../../language-reference/keywords/built-in-types-table.md)

    - [Tabulka implicitních číselných převodů](../../language-reference/keywords/implicit-numeric-conversions-table.md)

    - [Tabulka explicitních číselných převodů](../../language-reference/keywords/explicit-numeric-conversions-table.md)
