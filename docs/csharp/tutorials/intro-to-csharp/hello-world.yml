### YamlMime:Tutorial
title: Hello World – Úvod do C# interaktivního C# kurzu
metadata:
  title: Hello World – Úvod do C# interaktivního C# kurzu
  description: V tomto kurzu použijete prohlížeč pro interaktivní informace C# . Napíšete C# kód a zobrazíte výsledky kompilace a spuštění kódu přímo v prohlížeči.
  audience: Developer
  level: Beginner
  ms.date: 08/24/2018
  nextTutorialHref: numbers-in-csharp.yml
  nextTutorialTitle: Čísla v jazyce C#
  displayType: two-column
  interactive: csharp
  ms.custom: mvc
  ms.openlocfilehash: 36254062835b9ab70ba470f6286b7515003dec11
  ms.sourcegitcommit: 205b9a204742e9c77256d43ac9d94c3f82909808
  ms.translationtype: MT
  ms.contentlocale: cs-CZ
  ms.lasthandoff: 09/10/2019
  ms.locfileid: "70850795"
items:
- durationInMinutes: 1
  content: >
    V tomto kurzu se interaktivně C# naučíte používat prohlížeč k psaní C# a zobrazení výsledků kompilace a spuštění kódu. Obsahuje řadu lekcí, které začínají programem "Hello World". V těchto lekcích se naučíte základy C# jazyka.
- title: Spustit první C# program
  durationInMinutes: 2
  content: >
    Spusťte následující kód v interaktivním okně. Uděláte to tak, že do interaktivního okna zadáte následující blok kódu a kliknete na tlačítko **Spustit** :


    ```csharp

    Console.WriteLine("Hello World!");

    ```


    Blahopřejeme! Spustili jste svůj první C# program. Jedná se o jednoduchý program, který tiskne zprávu "Hello World!". Použila <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> metodu k vytištění této zprávy. `Console`je typ, který představuje okno konzoly. `WriteLine`je metoda `Console` typu, která na tuto textovou konzoli tiskne řádek textu.


    Pojďme se přemístit a prozkoumat další. Zbytek této lekce zkoumá práci s `string` typem, který představuje text v. C# Podobně jako `string` typ obsahuje typ metody. `Console` `string` Metody fungují s textem.


    > [!NOTE]

    > Toto online prostředí kódování je v režimu náhledu. Pokud narazíte na problémy, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Deklarace a používání proměnných
  durationInMinutes: 3
  content: >
    Váš první program vytiskl `string` "Hello World!" na obrazovce.


    > [!TIP]

    > Při prozkoumávání C# (nebo jakémkoli programovacím jazyce) budete při psaní kódu dělat chyby. **Kompilátor** tyto chyby vyhledá a nahlásí je. V případě, že výstup obsahuje chybové zprávy, pečlivě si prohlédněte vzorový kód a kód v interaktivním okně, kde zjistíte, co je třeba opravit.

    > Toto cvičení vám pomůže zjistit strukturu C# kódu.


    Váš první program je omezený na tisk jedné zprávy. Pomocí **proměnných**můžete napsat užitečnější programy. **Proměnná** je symbol, který můžete použít ke spuštění stejného kódu s různými hodnotami. Pojďme si to! Kód, který jste napsali v interaktivním okně, nahraďte následujícím kódem:


    ```csharp

    string aFriend = "Bill";

    Console.WriteLine(aFriend);

    ```


    První řádek deklaruje proměnnou `aFriend` a přiřadí jí hodnotu "fakturovat". Druhý řádek vytiskne název.


    Můžete přiřadit jiné hodnoty k libovolné proměnné, kterou deklarujete. Název můžete změnit na některého z vašich přátel. Přidejte tyto dva řádky do interaktivního okna za kód, který jste už přidali:


    ```csharp

    aFriend = "Maira";

    Console.WriteLine(aFriend);

    ```


    Všimněte si, že stejný řádek kódu vytiskne dvě různé zprávy na základě hodnoty uložené v `aFriend` proměnné.


    Možná jste si také všimli, že v posledních dvou zprávách chybí slovo "Hello". Pojďme to teď opravit.  Upravte řádky, které tisknou zprávu, do následujících:


    ```csharp

    Console.WriteLine("Hello " + aFriend);

    ```


    Kliknutím na tlačítko **Spustit** znovu zobrazíte výsledky.


    Používali `+` jste k vytváření řetězců z **proměnných** a **konstantních** řetězců. Existuje lepší způsob.

    Můžete umístit proměnnou mezi `{` a znaků a `}` dát C# tak nahradit tento text hodnotou proměnné.


    Tato metoda se nazývá [interpolace řetězce](../../language-reference/tokens/interpolated.md).


    Pokud přidáte `$` před levou počáteční uvozovku řetězce, můžete do řetězce mezi složenými závorkami zahrnout proměnné `aFriend`, jako například. Vydejte to try:



    ```csharp

    Console.WriteLine($"Hello {aFriend}");

    ```


    Kliknutím na tlačítko **Spustit** znovu zobrazíte výsledky. Místo "Hello {aFriend}" by měla být zpráva "Hello Maira".


    > [!NOTE]

    > Toto online prostředí kódování je v režimu náhledu. Pokud narazíte na problémy, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Práce s řetězci
  durationInMinutes: 5
  content: >
    Poslední úprava byla první pohled na to, co můžete s řetězci dělat. Pojďme prozkoumat víc.


    Nejste omezeni na jednu proměnnou mezi složenými závorkami. Zkuste tohle:


    ```csharp

    string firstFriend = "Maria";

    string secondFriend = "Sage";

    Console.WriteLine($"My friends are {firstFriend} and {secondFriend}");

    ```


    Při zkoumání více pomocí řetězců zjistíte, že řetězce jsou větší než kolekce písmen. Délku řetězce můžete najít pomocí `Length`. `Length`je **vlastnost** řetězce a vrátí počet znaků v řetězci. Do dolní části interaktivního okna přidejte následující kód:


    ```csharp

    Console.WriteLine($"The name {firstFriend} has {firstFriend.Length} letters.");

    Console.WriteLine($"The name {secondFriend} has {secondFriend.Length} letters.");

    ```


    > [!TIP]

    > To je vhodný čas k tomu, abyste se seznámili sami. Seznámili jste se `Console.WriteLine()` s tím, že se na obrazovku zapisuje text. Zjistili jste, jak deklarovat proměnné a zřetězit řetězce společně. Experimentujte v interaktivním okně. Okno obsahuje funkci s názvem **IntelliSense** , která dává návrhy na to, co můžete dělat. `.` Zadejte za`d` v .`firstFriend` Zobrazí se seznam návrhů pro vlastnosti a metody, které můžete použít.


    > [!NOTE]

    > Toto online prostředí kódování je v režimu náhledu. Pokud narazíte na problémy, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Další s řetězci
  durationInMinutes: 5
  content: >
    Použili jste **metodu** <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>pro tisk zpráv. **Metoda** je blok kódu, který implementuje určitou akci. Má název, takže k němu máte přístup.


    Předpokládejme, že vaše řetězce mají na začátku nebo na konci mezery, které nechcete zobrazit. Chcete **oříznout** mezery z řetězců.

    Metoda a související metody <xref:System.String.TrimStart%2A> a <xref:System.String.TrimEnd%2A> provede tuto práci. <xref:System.String.Trim%2A> Tyto metody můžete použít jenom k odebrání počátečních a koncových mezer. Vyzkoušejte následující kód:


    ```csharp

    string greeting = "      Hello World!       ";

    Console.WriteLine($"[{greeting}]");


    string trimmedGreeting = greeting.TrimStart();

    Console.WriteLine($"[{trimmedGreeting}]");


    trimmedGreeting = greeting.TrimEnd();

    Console.WriteLine($"[{trimmedGreeting}]");


    trimmedGreeting = greeting.Trim();

    Console.WriteLine($"[{trimmedGreeting}]");

    ```


    Tato ukázka posílí několik důležitých konceptů pro práci s řetězci. Metody, které pracují s řetězci, vracejí nové objekty řetězce místo provedení úprav. Můžete vidět, že každé volání libovolné `Trim` metody vrátí nový řetězec, ale původní zprávu nezmění.


    K dispozici jsou jiné metody, které lze použít pro práci s řetězcem. Například jste pravděpodobně použili příkaz Hledat a nahradit v editoru nebo textovém procesoru před. <xref:System.String.Replace%2A> Metoda dělá něco podobného v řetězci. Vyhledá podřetězec a nahradí ho jiným textem. Metoda používá dva **parametry.** <xref:System.String.Replace%2A> Jedná se o řetězce mezi závorkami. Prvním řetězcem je text, který se má vyhledat. Druhý řetězec je text, který má být nahrazen. Vyzkoušejte si to sami. Přidejte tento kód. Zadejte ho do, abyste viděli nápovědu při psaní `.Re` `sayHello` za proměnnou:


    ```csharp

    string sayHello = "Hello World!";

    Console.WriteLine(sayHello);

    sayHello = sayHello.Replace("Hello", "Greetings");

    Console.WriteLine(sayHello);

    ```


    Dvě další užitečné metody tvoří řetězce pro všechna velká písmena a malá písmena. Vyzkoušejte následující kód. Zadejte ho do a podívejte se, jak **IntelliSense** poskytuje tipy jako při psaní `To`:


    ```csharp

    Console.WriteLine(sayHello.ToUpper());

    Console.WriteLine(sayHello.ToLower());

    ```


    > [!NOTE]

    > Toto online prostředí kódování je v režimu náhledu. Pokud narazíte na problémy, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Hledání řetězců
  durationInMinutes: 10
  content: >
    Druhou částí operace *hledání a nahrazení* je vyhledat text v řetězci. Můžete použít <xref:System.String.Contains%2A> metodu pro hledání. Oznamuje vám, že pokud řetězec obsahuje podřetězec, který je uvnitř něj obsažený. Zkuste prozkoumat <xref:System.String.Contains%2A>následující kód:


    ```csharp

    string songLyrics = "You say goodbye, and I say hello";

    Console.WriteLine(songLyrics.Contains("goodbye"));

    Console.WriteLine(songLyrics.Contains("greetings"));

    ```


    Metoda vrátí logickou hodnotu, která oznamuje, zda byl nalezen hledaný řetězec. **** <xref:System.String.Contains%2A> **Logická** hodnota ukládá buď `true` `false` hodnotu, nebo. V pozdější lekci se dozvíte víc o **logických** hodnotách.


    ***Výzev***


    Existují dvě podobné metody <xref:System.String.StartsWith%2A> a <xref:System.String.EndsWith%2A> , které také hledají dílčí řetězce v řetězci. Ty vyhledají podřetězec na začátku nebo na konci řetězce. Zkuste změnit předchozí vzorek, který chcete použít <xref:System.String.StartsWith%2A> , <xref:System.String.EndsWith%2A> a ne <xref:System.String.Contains%2A>. Hledání "na" nebo "rozdálení" na začátku řetězce. Hledejte text "Hello" nebo "rozdálení" na konci řetězce.


    > [!NOTE]

    > Sledujte interpunkční znaménka při testování textu na konci řetězce. Pokud řetězec končí tečkou, je nutné vyhledat řetězec, který končí tečkou.


    Měli byste začít `true` od "vás" a končit řetězcem "Hello" a "false", a to od "a" po "nekonečno".


    > [!NOTE]

    > Toto online prostředí kódování je v režimu náhledu. Pokud narazíte na problémy, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Dokončení výzvy
  durationInMinutes: 3
  content: >
    Pracovali jste s podobným způsobem?


    ```csharp

    string songLyrics = "You say goodbye, and I say hello";

    Console.WriteLine(songLyrics.StartsWith("You"));

    Console.WriteLine(songLyrics.StartsWith("goodbye"));


    Console.WriteLine(songLyrics.EndsWith("hello"));

    Console.WriteLine(songLyrics.EndsWith("goodbye"));

    ```


    > [!NOTE]

    > Toto online prostředí kódování je v režimu náhledu. Pokud narazíte na problémy, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- content: >-
    Dokončili jste úvodní C# kurz " C#Hello". Kliknutím ** C# na níže uvedený odkaz můžete** spustit další interaktivní kurz, nebo můžete navštívit [Web .NET](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) a stáhnout .NET Core SDK, vytvořit projekt na počítači a zachovat kódování. Oddíl "další kroky" vás převede zpět na tyto kurzy.


    Pro další čtení `string` typu:

    - Téma průvodce [](../../programming-guide/strings/index.md) [programováním pro C# ](../../programming-guide/index.md) řetězce.

    - [Tipy pro práci s řetězci](../../how-to/index.md#working-with-strings).
