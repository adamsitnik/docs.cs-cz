### YamlMime:Tutorial
title: <span data-ttu-id="1a414-101">Interpolace řetězců umožňuje vytvářet formátované řetězce</span><span class="sxs-lookup"><span data-stu-id="1a414-101">Use string interpolation to construct formatted strings</span></span>
metadata:
  title: Interpolace - C# Interaktivní kurz
  description: V tomto kurzu pomocí prohlížeče interaktivně zkoumat funkce interpolace řetězců C#. Napíšete kód v C# a zobrazovat výsledky kompilace a spuštění prohlédnete přímo v prohlížeči.
  audience: Developer
  ms.custom: mvc
  ms.date: 08/24/2018
  level: Beginner
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection.yml
  nextTutorialTitle: <span data-ttu-id="1a414-105">Kolekce v jazyce C#</span><span class="sxs-lookup"><span data-stu-id="1a414-105">Collections in C#</span></span>
  ms.openlocfilehash: c5d9ba80df952a58740ac2557bfc0011ef2ea539
  ms.sourcegitcommit: 3b9b7ae6771712337d40374d2fef6b25b0d53df6
  ms.translationtype: MT
  ms.contentlocale: cs-CZ
  ms.lasthandoff: 01/04/2019
  ms.locfileid: "54030409"
items:
- durationInMinutes: 2
  content: >
    <span data-ttu-id="1a414-106">V tomto kurzu se naučíte, jak používat [interpolace](../../language-reference/tokens/interpolated.md) k vložení hodnoty do jednoho řetězce.</span><span class="sxs-lookup"><span data-stu-id="1a414-106">This tutorial teaches you how to use [string interpolation](../../language-reference/tokens/interpolated.md) to insert values into a single string.</span></span> <span data-ttu-id="1a414-107">Také se dozvíte, jak řídit formátování výsledného řetězce.</span><span class="sxs-lookup"><span data-stu-id="1a414-107">You also learn how to control text formatting of the result string.</span></span> <span data-ttu-id="1a414-108">Pomocí prohlížeče pro zápis a spouštění C# kód a hned vidět výsledky.</span><span class="sxs-lookup"><span data-stu-id="1a414-108">You use your browser to write and run C# code and can immediately see the results.</span></span>
- title: <span data-ttu-id="1a414-109">Vytvoření interpolovaného řetězce</span><span class="sxs-lookup"><span data-stu-id="1a414-109">Create an interpolated string</span></span>
  durationInMinutes: 2
  content: >
    <span data-ttu-id="1a414-110">Spusťte v interaktivním okně následující kód.</span><span class="sxs-lookup"><span data-stu-id="1a414-110">Run the following code in the interactive window.</span></span> <span data-ttu-id="1a414-111">Chcete-li to mohli udělat, zadejte kód v interaktivním okně (nahradit `<name>` s vaším jménem) a vyberte **spustit**:</span><span class="sxs-lookup"><span data-stu-id="1a414-111">To do that, type the code in the interactive window (replace `<name>` with your name) and select **Run**:</span></span>


    ```csharp

    var name = "<name>";

    Console.WriteLine($"Hello, {name}. It's a pleasure to meet you!");

    ```


    <span data-ttu-id="1a414-112">Při spuštění kódu, **výstup** zobrazí řetězec, který obsahuje vaše jméno pozdrav.</span><span class="sxs-lookup"><span data-stu-id="1a414-112">When you run the code, **Output** displays a string that includes your name in the greeting.</span></span> <span data-ttu-id="1a414-113">Argument řetězce <xref:System.Console.WriteLine%2A> je volání metody *interpolovaný řetězec*.</span><span class="sxs-lookup"><span data-stu-id="1a414-113">The string argument of the <xref:System.Console.WriteLine%2A> method call is an *interpolated string*.</span></span> <span data-ttu-id="1a414-114">Je druh šablony, který umožňuje vytvořit jeden řetězec (volá se, *výsledný řetězec*) z řetězce obsahujícího vložený kód.</span><span class="sxs-lookup"><span data-stu-id="1a414-114">It's a kind of template that lets you construct a single string (called the *result string*) from a string that includes embedded code.</span></span> <span data-ttu-id="1a414-115">Interpolované řetězce se hodí hlavně k vkládání hodnot do řetězce nebo řetězení (spojování) několik řetězců.</span><span class="sxs-lookup"><span data-stu-id="1a414-115">Interpolated strings are particularly useful for inserting values into a string or concatenating (joining together) several strings.</span></span>


    <span data-ttu-id="1a414-116">Výše uvedený příklad obsahuje dva elementy, které musí mít každém interpolovaném řetězci povinné:</span><span class="sxs-lookup"><span data-stu-id="1a414-116">The example above contains the two elements that every interpolated string must have:</span></span>


    - <span data-ttu-id="1a414-117">Řetězcový literál, který začíná `$` znak, před jeho znakem uvozovek.</span><span class="sxs-lookup"><span data-stu-id="1a414-117">A string literal that begins with the `$` character before its opening quotation mark character.</span></span> <span data-ttu-id="1a414-118">Nesmí být žádné mezery mezi `$` symbolů a znakem uvozovek.</span><span class="sxs-lookup"><span data-stu-id="1a414-118">There can't be any spaces between the `$` symbol and the quotation mark character.</span></span> <span data-ttu-id="1a414-119">(Pokud jste chtěli naleznete v tématu co se stane, když tak přece, vkládat mezeru po `$` znak v interaktivním okně, a spusťte aktualizovaný kód.</span><span class="sxs-lookup"><span data-stu-id="1a414-119">(If you'd like to see what happens if you include one, insert a space after the `$` character in the interactive window and run the updated code.</span></span> <span data-ttu-id="1a414-120">Kompilátor jazyka C# si bude stěžovat na "Neočekávaný znak"$"".)</span><span class="sxs-lookup"><span data-stu-id="1a414-120">The C# compiler complains, "Unexpected character '$'".)</span></span>


    - <span data-ttu-id="1a414-121">Jeden nebo více *interpolovaných výrazů*.</span><span class="sxs-lookup"><span data-stu-id="1a414-121">One or more *interpolated expressions*.</span></span> <span data-ttu-id="1a414-122">Interpolovaný výraz se vyznačuje otevírací a zavírací závorkou (`{` a `}`).</span><span class="sxs-lookup"><span data-stu-id="1a414-122">An interpolated expression is indicated by an opening and closing brace (`{` and `}`).</span></span> <span data-ttu-id="1a414-123">Můžete vložit libovolný výraz C#, která vrací hodnotu (včetně `null`) uvnitř složených závorek.</span><span class="sxs-lookup"><span data-stu-id="1a414-123">You can put any C# expression that returns a value (including `null`) inside the braces.</span></span>


    <span data-ttu-id="1a414-124">Teď si vyzkoušíme pár dalších příkladů interpolace řetězce, s jinými datovými typy.</span><span class="sxs-lookup"><span data-stu-id="1a414-124">Let's try a few more string interpolation examples with some other data types.</span></span>


    > [!NOTE]

    > <span data-ttu-id="1a414-125">Toto online kódovací prostředí je v režimu náhledu.</span><span class="sxs-lookup"><span data-stu-id="1a414-125">This online coding experience is in preview mode.</span></span> <span data-ttu-id="1a414-126">Pokud narazíte na potíže, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="1a414-126">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="1a414-127">Zahrnutí různých datových typů</span><span class="sxs-lookup"><span data-stu-id="1a414-127">Include different data types</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="1a414-128">V předchozím kroku jste použili interpolace řetězců vložili jeden řetězec do druhého.</span><span class="sxs-lookup"><span data-stu-id="1a414-128">In the previous step, you used string interpolation to insert one string inside of another.</span></span> <span data-ttu-id="1a414-129">Výsledek interpolovaného výrazu může být libovolného datového typu, ale.</span><span class="sxs-lookup"><span data-stu-id="1a414-129">The result of an interpolated expression can be of any data type, though.</span></span> <span data-ttu-id="1a414-130">Umožňuje zahrnout hodnoty různých datových typů v interpolovaném řetězci.</span><span class="sxs-lookup"><span data-stu-id="1a414-130">Let's include values of various data types in an interpolated string.</span></span>


    <span data-ttu-id="1a414-131">V následujícím příkladu nejdřív nadefinujeme [třídy](../../programming-guide/classes-and-structs/classes.md) datový typ `Vegetable` , který má `Name` [vlastnost](../../properties.md) a `ToString` [metoda](../../methods.md), které [přepíše](../../language-reference/keywords/override.md) chování <xref:System.Object.ToString?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="1a414-131">In the following example, we first define a [class](../../programming-guide/classes-and-structs/classes.md) data type `Vegetable` that has a `Name` [property](../../properties.md) and a `ToString` [method](../../methods.md), which [overrides](../../language-reference/keywords/override.md) the behavior of the <xref:System.Object.ToString?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="1a414-132">[ `public` Modifikátor přístupu](../../language-reference/keywords/public.md) zpřístupní metody pro jakýkoli kód klienta, k získání řetězcové reprezentace `Vegetable` instance.</span><span class="sxs-lookup"><span data-stu-id="1a414-132">The [`public` access modifier](../../language-reference/keywords/public.md) makes that method available to any client code to get the string representation of a `Vegetable` instance.</span></span> <span data-ttu-id="1a414-133">V příkladu `Vegetable.ToString` metoda vrátí hodnotu `Name` vlastnost, která je inicializována na `Vegetable` [konstruktor](../../programming-guide/classes-and-structs/constructors.md): `Vegetable(string name) => Name = name;`.</span><span class="sxs-lookup"><span data-stu-id="1a414-133">In the example the `Vegetable.ToString` method returns the value of the `Name` property that is initialized at the `Vegetable` [constructor](../../programming-guide/classes-and-structs/constructors.md): `Vegetable(string name) => Name = name;`.</span></span> <span data-ttu-id="1a414-134">Pak vytvoříme instanci `Vegetable` třídu s názvem `item` pomocí [ `new` – klíčové slovo](../../language-reference/keywords/new-operator.md) a poskytnutí názvu pro konstruktor `Vegetable`.</span><span class="sxs-lookup"><span data-stu-id="1a414-134">Then we create an instance of the `Vegetable` class named `item` by using the [`new` keyword](../../language-reference/keywords/new-operator.md) and providing a name for the constructor `Vegetable`.</span></span> <span data-ttu-id="1a414-135">Nakonec jsme zahrnuli této instance na interpolovaný řetězec, který také obsahuje <xref:System.DateTime> hodnotu, <xref:System.Decimal> hodnotu a `Unit` [výčet](../../programming-guide/enumeration-types.md) hodnotu.</span><span class="sxs-lookup"><span data-stu-id="1a414-135">Finally, we include that instance into an interpolated string that also contains a <xref:System.DateTime> value, a <xref:System.Decimal> value, and a `Unit` [enumeration](../../programming-guide/enumeration-types.md) value.</span></span> <span data-ttu-id="1a414-136">Spusťte v interaktivním okně následující kód:</span><span class="sxs-lookup"><span data-stu-id="1a414-136">Run the following code in the interactive window:</span></span>


    ```csharp

    public class Vegetable

    {
       public Vegetable(string name) => Name = name;

       public string Name { get; }

       public override string ToString() => Name;
    }


    public enum Unit { item, kilogram, gram, dozen };


    var item = new Vegetable("eggplant");

    var date = DateTime.Now;

    var price = 1.99m;

    var unit = Unit.item;

    Console.WriteLine($"On {date}, the price of {item} was {price} per {unit}.");

    ```


    <span data-ttu-id="1a414-137">Všimněte si, že interpolovaný výraz `item` v interpolovaném řetězci se překládá na text "eggplant" ve výsledném řetězci.</span><span class="sxs-lookup"><span data-stu-id="1a414-137">Note that the interpolated expression `item` in the interpolated string resolves to the text "eggplant" in the result string.</span></span> <span data-ttu-id="1a414-138">Je to proto, že pokud typ výsledku výrazu není řetězec, výsledek je přeložen na řetězec následujícím způsobem:</span><span class="sxs-lookup"><span data-stu-id="1a414-138">That's because, when the type of the expression result is not a string, the result is resolved to a string in the following way:</span></span>


    - <span data-ttu-id="1a414-139">Pokud interpolovaný výraz vyhodnocen `null`, prázdný řetězec ("", nebo <xref:System.String.Empty?displayProperty=nameWithType>) se používá.</span><span class="sxs-lookup"><span data-stu-id="1a414-139">If the interpolated expression evaluates to `null`, an empty string ("", or <xref:System.String.Empty?displayProperty=nameWithType>) is used.</span></span>


    - <span data-ttu-id="1a414-140">Pokud interpolovaný výraz se nevyhodnocuje na `null`, obvykle `ToString` je volána metoda typ výsledku.</span><span class="sxs-lookup"><span data-stu-id="1a414-140">If the interpolated expression doesn't evaluate to `null`, typically the `ToString` method of the result type is called.</span></span> <span data-ttu-id="1a414-141">Můžete ho otestovat provádění aktualizací `Vegetable.ToString` metody.</span><span class="sxs-lookup"><span data-stu-id="1a414-141">You can test this by updating the implementation of the `Vegetable.ToString` method.</span></span> <span data-ttu-id="1a414-142">Ještě není nutné implementovat `ToString` metoda vzhledem k tomu, že každý typ má některé implementace této metody.</span><span class="sxs-lookup"><span data-stu-id="1a414-142">You might not even need to implement the `ToString` method since every type has some implementation of this method.</span></span> <span data-ttu-id="1a414-143">Abyste to mohli otestovat, okomentujte definici `Vegetable.ToString` metoda v příkladu (stačí vložit symbol komentáře `//`, před).</span><span class="sxs-lookup"><span data-stu-id="1a414-143">To test this, comment out the definition of the `Vegetable.ToString` method in the example (to do that, put a comment symbol, `//`, in front of it).</span></span> <span data-ttu-id="1a414-144">Ve výstupu se řetězec "eggplant" nahradí podle plně kvalifikovaného názvu (obor názvů definovaný smyčkou REPL jazyka C# spolu s názvem typu), což je výchozí chování sady <xref:System.Object.ToString?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="1a414-144">In the output, the string "eggplant" is replaced by the fully qualified type name (the namespace defined by the C# REPL along with the type name), which is the default behavior of the <xref:System.Object.ToString?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="1a414-145">Výchozí chování `ToString` metodou hodnota výčtu je vrátí řetězcovou reprezentaci hodnoty.</span><span class="sxs-lookup"><span data-stu-id="1a414-145">The default behavior of the `ToString` method for an enumeration value is to return the string representation of the value.</span></span>


    <span data-ttu-id="1a414-146">Ve výstupu tohoto příkladu je datum zbytečně přesné (cena lilku nemění každou sekundu) a hodnota ceny neuvádí jednotku měny.</span><span class="sxs-lookup"><span data-stu-id="1a414-146">In the output from this example, the date is too precise (the price of eggplant doesn't change every second), and the price value doesn't indicate a unit of currency.</span></span> <span data-ttu-id="1a414-147">V dalším kroku se dozvíte, jak tyto problémy napravit prostřednictvím nastavení formátu řetězcové reprezentace výsledku výrazu.</span><span class="sxs-lookup"><span data-stu-id="1a414-147">In the next step, you'll learn how to fix those issues by controlling the format of string representations of the expression results.</span></span>


    > [!NOTE]

    > <span data-ttu-id="1a414-148">Toto online kódovací prostředí je v režimu náhledu.</span><span class="sxs-lookup"><span data-stu-id="1a414-148">This online coding experience is in preview mode.</span></span> <span data-ttu-id="1a414-149">Pokud narazíte na potíže, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="1a414-149">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="1a414-150">Ovládací prvek formátu interpolovaných výrazů</span><span class="sxs-lookup"><span data-stu-id="1a414-150">Control the formatting of interpolated expressions</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="1a414-151">V předchozím kroku vložily dva špatně naformátované řetězce do výsledného řetězce.</span><span class="sxs-lookup"><span data-stu-id="1a414-151">In the previous step, two poorly formatted strings were inserted into the result string.</span></span> <span data-ttu-id="1a414-152">Jedna se hodnoty data a času, pro který byl pouze data odpovídající.</span><span class="sxs-lookup"><span data-stu-id="1a414-152">One was a date and time value for which only the date was appropriate.</span></span> <span data-ttu-id="1a414-153">Druhým byla cena, která nebyla označení jednotku měny.</span><span class="sxs-lookup"><span data-stu-id="1a414-153">The second was a price that didn't indicate its unit of currency.</span></span> <span data-ttu-id="1a414-154">Jsou oba problémy můžeme snadno vyřešit.</span><span class="sxs-lookup"><span data-stu-id="1a414-154">Both issues are easy to address.</span></span> <span data-ttu-id="1a414-155">Interpolace řetězců umožňuje určit *řetězce formátu* , které nastavují formátování konkrétních typů.</span><span class="sxs-lookup"><span data-stu-id="1a414-155">String interpolation lets you specify *format strings* that control the formatting of particular types.</span></span> <span data-ttu-id="1a414-156">Upravte volání `Console.WriteLine` z předchozího příkladu zahrnout formátovací řetězce pro výrazy data a ceny, jak je znázorněno na následujícím řádku:</span><span class="sxs-lookup"><span data-stu-id="1a414-156">Modify the call to `Console.WriteLine` from the previous example to include the format strings for the date and price expressions as shown in the following line:</span></span>


    ```csharp

    Console.WriteLine($"On {date:d}, the price of {item} was {price:C2} per {unit}.");

    ```


    <span data-ttu-id="1a414-157">Zadejte řetězec formátu podle interpolovaný výraz s čárkou (":") a nakonec formátovací řetězec.</span><span class="sxs-lookup"><span data-stu-id="1a414-157">You specify a format string by following the interpolated expression with a colon (":") and the format string.</span></span> <span data-ttu-id="1a414-158">"d" je [řetězec formátu data a času](../../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) , která představuje formátu krátkého data.</span><span class="sxs-lookup"><span data-stu-id="1a414-158">"d" is a [standard date and time format string](../../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) that represents the short date format.</span></span> <span data-ttu-id="1a414-159">"C2" je [řetězec standardního číselného formátu](../../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) , který představuje číslo jako hodnotu měny se dvěma číslicemi za desetinnou čárkou.</span><span class="sxs-lookup"><span data-stu-id="1a414-159">"C2" is a [standard numeric format string](../../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) that represents a number as a currency value with two digits after the decimal point.</span></span>


    <span data-ttu-id="1a414-160">Počet typů v knihovny .NET podporují předdefinovanou množinu řetězců formátu.</span><span class="sxs-lookup"><span data-stu-id="1a414-160">A number of types in the .NET libraries support a predefined set of format strings.</span></span> <span data-ttu-id="1a414-161">Patří mezi ně číselné typy a typy data a času.</span><span class="sxs-lookup"><span data-stu-id="1a414-161">These include all the numeric types and the date and time types.</span></span> <span data-ttu-id="1a414-162">Úplný seznam typů podporujících formátovací řetězce, naleznete v tématu [formátovací řetězce a typy v knihovně tříd rozhraní .NET](../../../standard/base-types/formatting-types.md#stringRef) v [formátovací typy v .NET](../../../standard/base-types/formatting-types.md) článku.</span><span class="sxs-lookup"><span data-stu-id="1a414-162">For a complete list of types that support format strings, see [Format Strings and .NET Class Library Types](../../../standard/base-types/formatting-types.md#stringRef) in the [Formatting Types in .NET](../../../standard/base-types/formatting-types.md) article.</span></span>


    <span data-ttu-id="1a414-163">Zkuste upravit formátovací řetězce v příkladu, pokud chcete zobrazit, jaký vliv mají formátování data a času a číselné hodnoty.</span><span class="sxs-lookup"><span data-stu-id="1a414-163">Try modifying the format strings in the example to see how they affect the formatting of the date and time and the numeric value.</span></span> <span data-ttu-id="1a414-164">Změňte "d" v `{date:d}` "t" (pro zobrazení formátu krátkého formátu času), "y" (zobrazí se rok a měsíc) a "yyyy" (zobrazí se rok jako čtyřmístné číslo).</span><span class="sxs-lookup"><span data-stu-id="1a414-164">Change the "d" in `{date:d}` to "t" (to display the short time format), "y" (to display the year and month), and "yyyy" (to display the year as a four-digit number).</span></span> <span data-ttu-id="1a414-165">Změňte "C2" v `{price:C2}` "e" (pro exponenciální notaci) a "F3" (pro číselnou hodnotu, s třemi číslicemi za desetinnou čárkou).</span><span class="sxs-lookup"><span data-stu-id="1a414-165">Change the "C2" in `{price:C2}` to "e" (for exponential notation) and "F3" (for a numeric value with three digits after the decimal point).</span></span>


    <span data-ttu-id="1a414-166">Vedle nastavení formátování můžete také řídit šířku pole a zarovnání formátovaného řetězce, které jsou obsaženy ve výsledném řetězci.</span><span class="sxs-lookup"><span data-stu-id="1a414-166">In addition to controlling formatting, you can also control the field width and alignment of the formatted strings that are included in the result string.</span></span> <span data-ttu-id="1a414-167">V dalším kroku se dozvíte, jak to udělat.</span><span class="sxs-lookup"><span data-stu-id="1a414-167">In the next step, you'll learn how to do this.</span></span>


    > [!NOTE]

    > <span data-ttu-id="1a414-168">Toto online kódovací prostředí je v režimu náhledu.</span><span class="sxs-lookup"><span data-stu-id="1a414-168">This online coding experience is in preview mode.</span></span> <span data-ttu-id="1a414-169">Pokud narazíte na potíže, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="1a414-169">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="1a414-170">Řídit šířku pole a zarovnání interpolovaných výrazů</span><span class="sxs-lookup"><span data-stu-id="1a414-170">Control the field width and alignment of interpolated expressions</span></span>
  durationInMinutes: 6
  content: >
    <span data-ttu-id="1a414-171">Obvykle když výsledek interpolovaného výrazu má formát na řetězec, tento řetězec je součástí výsledného řetězce bez úvodní a koncové mezery.</span><span class="sxs-lookup"><span data-stu-id="1a414-171">Ordinarily, when the result of an interpolated expression is formatted to string, that string is included in a result string without leading or trailing spaces.</span></span> <span data-ttu-id="1a414-172">Zejména při práci se sadou dat, nebudou moct řídit šířku pole a zarovnání textu pomáhá lépe čitelný výstup.</span><span class="sxs-lookup"><span data-stu-id="1a414-172">Particularly when you work with a set of data, being able to control a field width and text alignment helps to produce a more readable output.</span></span> <span data-ttu-id="1a414-173">Příklad zobrazíte spuštěním následujícího kódu:</span><span class="sxs-lookup"><span data-stu-id="1a414-173">To see this, run the following code:</span></span>


    ```csharp
      var inventory = new Dictionary<string, int>()
      {
          ["hammer, ball pein"] = 18,
          ["hammer, cross pein"] = 5,
          ["screwdriver, Phillips #2"] = 14
      };

      Console.WriteLine($"Inventory on {DateTime.Now:d}");
      Console.WriteLine(" ");
      Console.WriteLine($"|{"Item",-25}|{"Quantity",10}|");
      foreach (var item in inventory)
         Console.WriteLine($"|{item.Key,-25}|{item.Value,10}|");
    ```


    <span data-ttu-id="1a414-174">Názvy položek jsou zarovnané vlevo a jejich množství jsou zarovnaná vpravo.</span><span class="sxs-lookup"><span data-stu-id="1a414-174">The item names are left-aligned, and their quantities are right-aligned.</span></span> <span data-ttu-id="1a414-175">Zarovnání určíte přidáním čárky (",") po interpolovaný výraz a uvedením *minimální* šířku pole.</span><span class="sxs-lookup"><span data-stu-id="1a414-175">You specify the alignment by adding a comma (",") after an interpolated expression and designating the *minimum* field width.</span></span> <span data-ttu-id="1a414-176">Pokud zadaná hodnota je kladné číslo, pole zarovnané vpravo.</span><span class="sxs-lookup"><span data-stu-id="1a414-176">If the specified value is a positive number, the field is right-aligned.</span></span> <span data-ttu-id="1a414-177">Pokud je záporné číslo, pole zarovnané vlevo.</span><span class="sxs-lookup"><span data-stu-id="1a414-177">If it is a negative number, the field is left-aligned.</span></span>


    <span data-ttu-id="1a414-178">Zkuste odstranit záporná znaménka z `{"Item",-25}` a `{item.Key,-25}` kód a znovu spusťte příklad kódu.</span><span class="sxs-lookup"><span data-stu-id="1a414-178">Try removing the negative signs from the `{"Item",-25}` and `{item.Key,-25}` code and run the example again.</span></span> <span data-ttu-id="1a414-179">Tentokrát, názvy položek jsou zarovnaná vpravo.</span><span class="sxs-lookup"><span data-stu-id="1a414-179">This time, the item names are right-aligned.</span></span>


    <span data-ttu-id="1a414-180">Specifikátor zarovnání a řetězec formátu pro jednom interpolovaném výrazu můžete kombinovat.</span><span class="sxs-lookup"><span data-stu-id="1a414-180">You can combine an alignment specifier and a format string for a single interpolated expression.</span></span> <span data-ttu-id="1a414-181">K tomuto účelu Určuje zarovnání nejprve, za nímž následuje dvojtečka a nakonec formátovací řetězec.</span><span class="sxs-lookup"><span data-stu-id="1a414-181">To do that, specify the alignment first, followed by a colon and the format string.</span></span> <span data-ttu-id="1a414-182">Vyzkoušejte následující kód, který zobrazí tři zformátované řetězce s určenými šířkami polí:</span><span class="sxs-lookup"><span data-stu-id="1a414-182">Try the following code that displays three formatted strings with defined field widths:</span></span>


    ```csharp

    Console.WriteLine($"[{DateTime.Now,-20:d}] Hour [{DateTime.Now,-10:HH}] [{1063.342,15:N2}] feet");

    ```


    > [!NOTE]

    > <span data-ttu-id="1a414-183">Toto online kódovací prostředí je v režimu náhledu.</span><span class="sxs-lookup"><span data-stu-id="1a414-183">This online coding experience is in preview mode.</span></span> <span data-ttu-id="1a414-184">Pokud narazíte na potíže, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="1a414-184">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- content: >-
    <span data-ttu-id="1a414-185">Dokončili jste kurz interaktivní interpolace řetězce.</span><span class="sxs-lookup"><span data-stu-id="1a414-185">You've completed the string interpolation interactive tutorial.</span></span> <span data-ttu-id="1a414-186">Můžete kliknout \*\*kolekce v C# \*\* odkaz níže spusťte další interaktivní kurz, nebo můžete navštívit [.NET Web](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial) stáhnout .NET Core SDK, vytvořte projekt na vašem počítači a zachovat kódování .</span><span class="sxs-lookup"><span data-stu-id="1a414-186">You can click the **Collections in C#** link below to start the next interactive tutorial, or you can visit the [.NET site](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial) to download the .NET Core SDK, create a project on your machine, and keep coding.</span></span> <span data-ttu-id="1a414-187">Krok "Zachovat učení" přináší zpět do těchto kurzů.</span><span class="sxs-lookup"><span data-stu-id="1a414-187">The "Keep Learning" step brings you back to these tutorials.</span></span>


    <span data-ttu-id="1a414-188">Další informace najdete v tématu [interpolace](../../language-reference/tokens/interpolated.md).</span><span class="sxs-lookup"><span data-stu-id="1a414-188">For more information, see [String interpolation](../../language-reference/tokens/interpolated.md).</span></span>
