### YamlMime:Tutorial
title: Naučte se spravovat pomocí typ obecný seznam kolekcí dat
metadata:
  title: Kolekce dat – Úvod do C# Interaktivní kurz
  description: V tomto kurzu použijete prohlížeče interaktivně učit C#. Napíšete kód v C# a zobrazovat výsledky kompilace a spuštění prohlédnete přímo v prohlížeči.
  audience: Developer
  ms.custom: mvc
  ms.date: 10/23/2018
  level: Beginner
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 8ee13ec60f0504982c33ecc61940b731d320d2de
  ms.sourcegitcommit: c4e9d05644c9cb89de5ce6002723de107ea2e2c4
  ms.translationtype: MT
  ms.contentlocale: cs-CZ
  ms.lasthandoff: 05/19/2019
  ms.locfileid: "65880566"
items:
- durationInMinutes: 1
  content: >
    V tomto kurzu se naučíte C# interaktivně, pomocí prohlížeče k zápisu C# kódu a zobrazovat výsledky kompilace a spuštění kódu. Obsahuje sérii lekcí, které vytvářet, upravovat a prozkoumejte kolekce a pole.
- title: Vytváření seznamů
  durationInMinutes: 2
  content: >
    Spusťte v interaktivním okně následující kód. K tomu, zadejte do interaktivního okna následující blok kódu (nahradit `<name>` s vaším jménem) a klikněte na tlačítko **spustit** tlačítka:


    ```csharp

    var names = new List<string> { "<name>", "Ana", "Felipe" };

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    Jste vytvořili seznam řetězců, do tohoto seznamu přidal tři názvy a vytiskne názvy všechna písmena velká. Používáte koncepty, které jste se naučili v předchozích kurzech se ve smyčce prostřednictvím seznamu.


    Kód k zobrazení názvů využívá [interpolace](../../language-reference/tokens/interpolated.md) funkce. Když předcházet `string` s `$` znak, můžete vložit kód jazyka C# v deklaraci řetězec. Aktuální řetězcovou nahradí hodnotu, kterou generuje tento kód jazyka C#. V tomto příkladu, nahradí `{name.ToUpper()}` s názvy jednotlivých převeden na velká písmena, protože jste volali <xref:System.String.ToUpper%2A?displayProperty=nameWithType> metody.


    Umožňuje pokračovat v prozkoumávání služby.


    > [!NOTE]

    > Toto online kódovací prostředí je v režimu náhledu. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Změna seznamu obsahu
  durationInMinutes: 3
  content: >
    Kolekce, které jste vytvořili, používá <xref:System.Collections.Generic.List%601> typu. Tento typ ukládá sekvencí prvků. Můžete zadat typ prvků mezi ostrých závorek.


    Jeden důležitý aspekt jazyka to <xref:System.Collections.Generic.List%601> typ je, že se může zvětšovat nebo zmenšovat, umožňuje přidat nebo odebrat prvky. Zobrazí se výsledky tak, že upravíte obsah po zobrazíte jeho obsah. Přidejte následující kód pod kód, který jste už zadali (pod smyčky, která vytiskne obsah):


    ```csharp

    Console.WriteLine();

    names.Add("Maria");

    names.Add("Bill");

    names.Remove("Ana");

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    Přidání další dva názvy do konce seznamu. Můžete rovněž jsme odstranili jeden také. Výstup z tohoto bloku kódu zobrazí počáteční obsah, a potom zobrazí prázdný řádek a nový obsah.


    <xref:System.Collections.Generic.List%601> Umožňuje odkazovat na jednotlivé položky podle **index** také. Přístup pomocí položky `[` a `]` tokeny. Přidejte následující kód pod již jste napsali a vyzkoušejte si to:


    ```csharp

    Console.WriteLine($"My name is {names[0]}.");

    Console.WriteLine($"I've added {names[2]} and {names[3]} to the list.");

    ```


    Nemáte oprávnění k přístupu za koncem seznamu. Můžete zkontrolovat, jak dlouho je pomocí seznamu <xref:System.Collections.Generic.List%601.Count%2A> vlastnost. Přidejte následující kód můžete vyzkoušet:


    ```csharp

    Console.WriteLine($"The list has {names.Count} people in it");

    ```


    Klikněte na tlačítko **spustit** znovu, abyste viděli výsledek. V jazyce C#, indexy začínají hodnotou 0, největší platný index je jeden menší než počet položek v seznamu.


    > [!NOTE]

    > Toto online kódovací prostředí je v režimu náhledu. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Vyhledávání a řazení seznamy
  durationInMinutes: 5
  content: >
    Naše ukázky používat poměrně krátké seznamy, ale vaše aplikace může často vytvořit seznamy s mnoha další prvky, někdy číslování v tisících. Najít prvky v těchto kolekcích větší, budete muset pro různé položky v seznamu vyhledejte. <xref:System.Collections.Generic.List%601.IndexOf%2A> Metoda vyhledá položku a vrátí index položky. Vyzkoušejte ho, abyste viděli, jak to funguje.  Přidejte následující kód níže, co jste napsali zatím:


    ```csharp

    var index = names.IndexOf("Felipe");

    if (index != -1)
      Console.WriteLine($"The name {names[index]} is at index {index}");

    var notFound = names.IndexOf("Not Found");
      Console.WriteLine($"When an item is not found, IndexOf returns {notFound}");
    ```


    Nemusí vědět, pokud je určitá položka v seznamu, abyste měli vždy zkontrolujte index vrácený <xref:System.Collections.Generic.List%601.IndexOf%2A>. Pokud je hodnota -1, položka nebyla nalezena.


    Také lze seřadit položky v seznamu. <xref:System.Collections.Generic.List%601.Sort%2A> Metoda seřadí všechny položky v seznamu v jejich normálním pořadí (podle abecedy. v případě řetězce). Přidejte tento kód a znovu spusťte:


    ```csharp

    names.Sort();

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    > [!NOTE]

    > Toto online kódovací prostředí je v režimu náhledu. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Jiné typy seznamů
  durationInMinutes: 5
  content: >
    Zatím jste používali `string` typ v seznamech doposud. Vytvoříme <xref:System.Collections.Generic.List%601> pomocí jiného typu. Vytvořme sady čísel. Odstranit kód, který jste zatím napsali a nahraďte ji následujícím kódem:


    ```csharp

    var fibonacciNumbers = new List<int> {1, 1};

    ```


    Který vytvoří seznam celých čísel a nastaví prvních dvou celých čísel na hodnotu 1. *Fibonacciho pořadí*, sekvenci čísel, začíná dvěma 1s. Každé další číslo Fibonacciho nenajde provedením součtu předchozích dvou čísel. Přidejte tento kód:


    ```csharp

    var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];

    var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];


    fibonacciNumbers.Add(previous + previous2);


    foreach(var item in fibonacciNumbers)
        Console.WriteLine(item);
    ```


    Stisknutím klávesy **spustit** zobrazíte výsledky;


    > [!NOTE]

    > Toto online kódovací prostředí je v režimu náhledu. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Výzvy
  durationInMinutes: 10
  content: >
    Zobrazit, pokud můžete umístit společně některé koncepty z tohoto a dříve lekce. Rozbalte na co začlenění zatím Fibonacciho čísly. Vyzkoušejte a napsat kód pro vytvoření prvních 20 čísel v sekvenci. (Jako pomocného parametru, je 20. prosincem Fibonacciho číslo 6765.)


    > [!NOTE]

    > Toto online kódovací prostředí je v režimu náhledu. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Dokončení výzvy
  durationInMinutes: 3
  content: >
    Napsali jste kód podobný tomuto?


    ```csharp

    var fibonacciNumbers = new List<int> {1, 1};


    while (fibonacciNumbers.Count < 20)

    {
        var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];
        var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];

        fibonacciNumbers.Add(previous + previous2);
    }

    foreach(var item in fibonacciNumbers)
        Console.WriteLine(item);
    ```


    S každou iterací smyčky přenášíte posledních dvou celých čísel v seznamu je sčítání a přidáte tuto hodnotu do seznamu. Smyčka se opakuje dokud nepřidáte 20 položek do seznamu.


    > [!NOTE]

    > Toto online kódovací prostředí je v režimu náhledu. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- content: >-
    Dokončili jste kurz interaktivní seznamu. Který je posledním Úvod do C# interaktivního kurzu. Můžete přejít [.NET Web](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial) stáhnout .NET Core SDK, vytvořte projekt na vašem počítači a zachovat kódování. Krok "Zachovat učení" přináší zpět do těchto kurzů k sestavení projektů na vašem počítači.


    Další informace o [kolekcí .NET](../../../standard/collections/index.md) v následujících článcích:

    - [Výběr typu kolekce](../../../standard/collections/selecting-a-collection-class.md)

    - [Běžně používané typy kolekcí](../../../standard/collections/commonly-used-collection-types.md)

    - [Kdy použít generické kolekce](../../../standard/collections/when-to-use-generic-collections.md)
