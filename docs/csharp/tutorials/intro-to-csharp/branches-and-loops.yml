### YamlMime:Tutorial
title: Další podmíněnou logiku s příkazy větve a smyčky
metadata:
  title: Větve a smyčky – Úvod do C# Interaktivní kurz
  description: V tomto kurzu o větvích a smyčkách se budete pomocí prohlížeče učit C# interaktivně. Budete psát kód v C# a zobrazovat výsledky kompilace a spuštění prohlédnete přímo v prohlížeči.
  audience: Developer
  level: Beginner
  ms.custom: mvc
  ms.date: 08/24/2018
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection.yml
  nextTutorialTitle: Kolekce seznamu
  ms.openlocfilehash: aa6e91af175d1d3a3dcad7086c3a8205d45f438a
  ms.sourcegitcommit: ca2ca60e6f5ea327f164be7ce26d9599e0f85fe4
  ms.translationtype: MT
  ms.contentlocale: cs-CZ
  ms.lasthandoff: 05/06/2019
  ms.locfileid: "65063848"
items:
- durationInMinutes: 1
  content: >
    V tomto kurzu se naučíte, jak napsat kód, který vyhodnocuje proměnné a na jejich základě mění cestu provedení. Zápis C# interaktivně a zobrazovat výsledky kompilace a spuštění kódu budete pomocí svého prohlížeče. Tento kurz obsahuje sérii lekcí, které probírají konstrukty v větvení a smyček C#. Tato lekce vás naučí základy jazyka C#.
- title: Rozhodování pomocí příkazu if – příkaz
  durationInMinutes: 4
  content: >
    Spusťte v interaktivním okně následující kód. K tomu, zadejte do interaktivního okna následující blok kódu a klikněte na tlačítko **spustit** tlačítka:


    ```csharp

    int a = 5;

    int b = 6;

    if (a + b > 10)
        Console.WriteLine("The answer is greater than 10.");
    ```


    Upravte deklaraci `b` tak, aby součet je menší než 10:


    ```csharp

    int b = 3;

    ```


    Klikněte na tlačítko **spustit** tlačítko znovu. Protože odpověď je menší než 10, nic se nevytiskne. **Podmínku** jste testování má hodnotu false. Nemáte žádný kód spustit, protože jste zatím napsali jenom jednu z možných větví `if` – příkaz: větev pro splnění podmínky.


    > [!TIP]

    > Když se budete učit, C# (nebo libovolným programovacím jazykem), budete se při psaní kódu dělat chyby. **Kompilátoru** se tyto chyby odhalí a dejte nám o nich na vás. Pokud výstup obsahuje chybové zprávy, prohlédněte si blíže ukázkový kód a kód v interaktivním okně, abyste zjistili, co je opravit.

    > Toto cvičení vám pomůže seznámit se se strukturou kódu jazyka C#.


    Tento první příklad ukazuje sílu příkazu `if` a logických typů. A *logická* je proměnná, která může mít jednu ze dvou hodnot: `true` nebo `false`. C# definuje speciální typ `bool` pro proměnné typu boolean. `if` Příkaz zkontroluje hodnotu vlastnosti `bool`. Pokud je hodnotou `true`, příkazu za příkazem `if` spustí. V opačném případě se přeskočí.


    Tento proces kontroly podmínek a provádění příkazů na základě těchto podmínek je velmi výkonné. Podívejme se na další.


    > [!NOTE]

    > Toto online kódovací prostředí je v režimu náhledu. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: If a else spolupracují
  durationInMinutes: 10
  content: "\nChcete-li ve větvích true a false provést různý kód, vytvoříte `else` větev, která se provede, když podmínka není splněna. Zkuste tohle:\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10\");\nelse\n    Console.WriteLine(\"The answer is not greater than 10\");\n```\n\nNásledující příkaz `else` – klíčové slovo provede pouze, pokud je testovaná podmínka `false`. Kombinování `if` a `else` s logickými podmínkami poskytuje veškerou sílu, budete potřebovat.\n\n> [!IMPORTANT]\n> Důvodem odsazení pod `if` a `else` příkazy je snadnější čtení pro uživatele.\n> Jazyk C# nepovažuje odsazení a mezery za významné.\n> Následující příkaz `if` nebo `else` – klíčové slovo se spustí na základě podmínky. Všechny ukázky v tomto kurzu dodržují běžnou praxi odsazování řádků podle toku řízení příkazů.\n\nProtože odsazení není významné, je třeba použít `{` a `}` označte, když má více než jeden výraz jako součást podmíněně prováděného bloku. Programátoři v C# obvykle používají tyto složené závorky ve všech `if` a `else` klauzule. Následující příklad je stejný jako co jste právě vytvořili. Vyzkoušejte si to.\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n}\n```\n\n> [!TIP]\n> Postupujte podle zbývajících kroků v tomto kurzu, patří ukázky složené závorky podle přijaté praxe.\n\nMůžete testovat složitější podmínky:\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) && (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"And the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"Or the first number is not equal to the second\");\n}\n```\n\n`==` Symbol testy pro *rovnosti*. Pomocí `==` odlišuje od přiřazení, které jste viděli v testování rovnosti `a = 5`.\n\n`&&` Představuje \"a\". Znamená to, že obě podmínky musí mít hodnotu true, má provést větev true.  Tyto příklady také ukazují, že můžete mít více příkazů v každé podmíněné větvi, je v uzavřete `{` a `}`.\n\nMůžete také použít `||` představující \"nebo\":\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) || (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"Or the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"And the first number is not equal to the second\");\n}\n```\n\nUpravte hodnoty `a`, `b`, a `c` a přepínat mezi `&&` a `||` prozkoumat. Další vysvětlení, jak budete získat `&&` a `||` operátory fungovat.\n\n> [!NOTE]\n> Toto online kódovací prostředí je v režimu náhledu. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Použití smyček k opakování operací
  durationInMinutes: 6
  content: >
    Dalším důležitým konceptem pro vytváření větších programů je **smyčky**. Smyčky použijete k opakování příkazů, které chcete provést víckrát než jednou. Vyzkoušejte tento kód v interaktivním okně:


    ```csharp

    int counter = 0;

    while (counter < 10)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    }

    ```


    `while` Příkaz zkontroluje podmínku a provede příkaz následující `while`. Bude opakovaně kontrolovat podmínku a provádět příkaz, dokud podmínka není splněna.


    V tomto příkladu je jeden nový operátor. `++` Po `counter` proměnná je **přírůstek** operátor. Přičte 1 k hodnotě čítače a uloží hodnotu do proměnné counter.


    > [!IMPORTANT]

    > Ujistěte se, že `while` smyčku přepne na false, při spuštění kódu. V opačném případě můžete vytvořit **nekonečná smyčka** kde program nikdy neskončí. Není přiblížíme, protože modul, který spustí váš kód bude vypršení časového limitu a uvidíte žádný výstup z programu.


    `while` Smyčky otestuje podmínku před spuštěním kódu, který následuje `while`. `do` ... `while` smyčky nejdřív spustí kód a potom zkontrolujte tuto podmínku. Vypadá takto:


    ```csharp

    int counter = 0;

    do

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    } while (counter < 10);

    ```


    To `do` smyčky a dřívější `while` smyčky fungují stejně.


    Teď přejdeme k poslednímu příkazu smyčky.


    > [!NOTE]

    > Toto online kódovací prostředí je v režimu náhledu. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Práce s smyčka for
  durationInMinutes: 5
  content: >
    Dalím běžným příkazem smyčky, která se zobrazí v kódu jazyka C# je `for` smyčky. Vyzkoušejte tento kód v interaktivním okně:


    ```csharp

    for(int counter = 0; counter < 10; counter++)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
    }

    ```


    Funguje jako `while` smyčky a `do` smyčky, které jste už použili. `for` Příkaz má tři části, které řídí, jak to funguje.


    První část je **pro inicializátor**: `int counter = 0;` deklaruje, že `counter` je proměnná smyčky a nastavuje její počáteční hodnotu `0`.


    Prostřední část je **pro podmínku**: `counter < 10` deklaruje, že tento `for` smyčky pokračuje v provádění za předpokladu, hodnota čítače je menší než 10.


    Poslední část je **iterátoru**: `counter++` Určuje, jak upravit proměnnou smyčky po provedení bloku následujícího `for` příkazu. V tomto poli, určuje, že `counter` měli zvyšuje o 1 při každém provedení bloku.


    Vyzkoušet sami. Vyzkoušejte všechny z následujících akcí:


    - Změňte inicializační začínal jinou hodnotou.

    - Změňte podmínku, která má zastavit na jinou hodnotu.


    Až skončíte, přejdeme napsali kus kódu sami používat, co jste se naučili.


    > [!NOTE]

    > Toto online kódovací prostředí je v režimu náhledu. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Kombinace větví a smyček
  durationInMinutes: 12
  content: >
    Teď, když už víte, `if` příkazu a konstruktory cyklů v jazyce C# najdete v části Pokud můžete napsat kód jazyka C# pro zjistí součet všech celých čísel od 1 do 20, která jsou dělitelná 3.  Tady je několik tipů:


    - `%` Operátor poskytuje zbytek operace dělení.

    - `if` Příkaz poskytuje podmínku pro zjištění, pokud se číslo by mělo být součástí tohoto součtu.

    - `for` Smyčky pomůže zopakovat sérii kroků pro všechna čísla od 1 do 20.


    Vyzkoušejte si to sami. Zkontrolujte, jak jste to udělali. Jako Nápověda měli byste obdržet 63 pro odpověď.


    > [!NOTE]

    > Toto online kódovací prostředí je v režimu náhledu. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Dokončení výzvy
  durationInMinutes: 1
  content: >
    Napsali jste kód podobný tomuto?


    ```csharp

    int sum = 0;

    for (int number = 1; number < 21; number++)

    {
      if (number % 3 == 0)
      {
        sum = sum + number;
      }
    }

    Console.WriteLine($"The sum is {sum}");

    ```


    > [!NOTE]

    > Toto online kódovací prostředí je v režimu náhledu. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Blahopřejeme!
  content: >-
    Dokončili jste kurz interaktivní "větve a smyčky". Můžete kliknout **seznamu kolekce** odkaz níže spusťte další interaktivní kurz, nebo můžete navštívit [.NET Web](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial) stáhnout .NET Core SDK, vytvořte projekt na vašem počítači a zachovat kódování. Krok "Zachovat učení" přináší zpět do těchto kurzů.


    Další informace o těchto konceptech v těchto tématech:


    - [Pokud a else – příkaz](../../language-reference/keywords/if-else.md)

    - [while – příkaz](../../language-reference/keywords/while.md)

    - [do – příkaz](../../language-reference/keywords/do.md)

    - [For – příkaz](../../language-reference/keywords/for.md)
