### YamlMime:Tutorial
title: <span data-ttu-id="b2a91-101">Další informace o podmíněné logice s příkazy větví a smyček</span><span class="sxs-lookup"><span data-stu-id="b2a91-101">Learn conditional logic with branch and loop statements</span></span>
metadata:
  title: Větve a smyčky – Úvod k C# interaktivnímu kurzu
  description: V tomto kurzu o větvích a smyčkách použijete prohlížeč k interaktivnímu Projděte C# . Napíšete C# kód a uvidíte výsledky kompilace a spuštění kódu přímo v prohlížeči.
  audience: Developer
  level: Beginner
  ms.custom: mvc
  ms.date: 08/24/2018
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection.yml
  nextTutorialTitle: <span data-ttu-id="b2a91-105">Kolekce seznamů</span><span class="sxs-lookup"><span data-stu-id="b2a91-105">The list collection</span></span>
  ms.openlocfilehash: 0456582fb0aefa9e144b71517b9d8ed619929805
  ms.sourcegitcommit: 205b9a204742e9c77256d43ac9d94c3f82909808
  ms.translationtype: MT
  ms.contentlocale: cs-CZ
  ms.lasthandoff: 09/10/2019
  ms.locfileid: "70850778"
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="b2a91-106">V tomto kurzu se naučíte, jak napsat kód, který prochází proměnné a mění cestu provádění na základě těchto proměnných.</span><span class="sxs-lookup"><span data-stu-id="b2a91-106">This tutorial teaches you how to write code that examines variables and changes execution path based on those variables.</span></span> <span data-ttu-id="b2a91-107">Použijete prohlížeč k interaktivnímu psaní C# a uvidíte výsledky kompilace a spuštění kódu.</span><span class="sxs-lookup"><span data-stu-id="b2a91-107">You'll use your browser to write C# interactively and see the results of compiling and running your code.</span></span> <span data-ttu-id="b2a91-108">Tento kurz obsahuje řadu lekcí, které se seznámí s konstrukcemi větvení a smyček C#v.</span><span class="sxs-lookup"><span data-stu-id="b2a91-108">This tutorial contains a series of lessons that explore branching and looping constructs in C#.</span></span> <span data-ttu-id="b2a91-109">V těchto lekcích se naučíte základy C# jazyka.</span><span class="sxs-lookup"><span data-stu-id="b2a91-109">These lessons teach you the fundamentals of the C# language.</span></span>
- title: <span data-ttu-id="b2a91-110">Rozhodování pomocí příkazu if</span><span class="sxs-lookup"><span data-stu-id="b2a91-110">Make decisions using the if statement</span></span>
  durationInMinutes: 4
  content: >
    <span data-ttu-id="b2a91-111">Spusťte následující kód v interaktivním okně.</span><span class="sxs-lookup"><span data-stu-id="b2a91-111">Run the following code in the interactive window.</span></span> <span data-ttu-id="b2a91-112">Uděláte to tak, že do interaktivního okna zadáte následující blok kódu a kliknete na tlačítko **Spustit** :</span><span class="sxs-lookup"><span data-stu-id="b2a91-112">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>


    ```csharp

    int a = 5;

    int b = 6;

    if (a + b > 10)
        Console.WriteLine("The answer is greater than 10.");
    ```


    <span data-ttu-id="b2a91-113">Upravte deklaraci `b` tak, aby součet byl menší než 10:</span><span class="sxs-lookup"><span data-stu-id="b2a91-113">Modify the declaration of `b` so that the sum is less than 10:</span></span>


    ```csharp

    int b = 3;

    ```


    <span data-ttu-id="b2a91-114">Znovu klikněte na tlačítko **Spustit** .</span><span class="sxs-lookup"><span data-stu-id="b2a91-114">Click the **Run** button again.</span></span> <span data-ttu-id="b2a91-115">Vzhledem k tomu, že odpověď je menší než 10, nic se nevytiskne.</span><span class="sxs-lookup"><span data-stu-id="b2a91-115">Because the answer is less than 10, nothing is printed.</span></span> <span data-ttu-id="b2a91-116">**Podmínka** , kterou testujete, je nepravdivá.</span><span class="sxs-lookup"><span data-stu-id="b2a91-116">The **condition** you're testing is false.</span></span> <span data-ttu-id="b2a91-117">Nemáte žádný kód, který by bylo možné provést, protože jste zadali pouze jednu z možných větví pro `if` příkaz: jedinou větví.</span><span class="sxs-lookup"><span data-stu-id="b2a91-117">You don't have any code to execute because you've only written one of the possible branches for an `if` statement: the true branch.</span></span>


    > [!TIP]

    > <span data-ttu-id="b2a91-118">Při prozkoumávání C# (nebo jakémkoli programovacím jazyce) budete při psaní kódu dělat chyby.</span><span class="sxs-lookup"><span data-stu-id="b2a91-118">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id="b2a91-119">**Kompilátor** tyto chyby vyhledá a nahlásí je.</span><span class="sxs-lookup"><span data-stu-id="b2a91-119">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id="b2a91-120">V případě, že výstup obsahuje chybové zprávy, pečlivě si prohlédněte vzorový kód a kód v interaktivním okně, kde zjistíte, co je třeba opravit.</span><span class="sxs-lookup"><span data-stu-id="b2a91-120">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>

    > <span data-ttu-id="b2a91-121">Toto cvičení vám pomůže zjistit strukturu C# kódu.</span><span class="sxs-lookup"><span data-stu-id="b2a91-121">That exercise will help you learn the structure of C# code.</span></span>


    <span data-ttu-id="b2a91-122">Tento první příklad ukazuje sílu `if` a logické typy.</span><span class="sxs-lookup"><span data-stu-id="b2a91-122">This first sample shows the power of `if` and boolean types.</span></span> <span data-ttu-id="b2a91-123">*Logická hodnota* je proměnná, která může mít jednu ze dvou hodnot: `true` nebo `false`.</span><span class="sxs-lookup"><span data-stu-id="b2a91-123">A *boolean* is a variable that can have one of two values: `true` or `false`.</span></span> <span data-ttu-id="b2a91-124">C#definuje speciální typ `bool` pro logické proměnné.</span><span class="sxs-lookup"><span data-stu-id="b2a91-124">C# defines a special type, `bool` for boolean variables.</span></span> <span data-ttu-id="b2a91-125">Příkaz kontroluje hodnotu `bool`. `if`</span><span class="sxs-lookup"><span data-stu-id="b2a91-125">The `if` statement checks the value of a `bool`.</span></span> <span data-ttu-id="b2a91-126">Pokud je `true`hodnota, příkaz `if` následující po spuštění.</span><span class="sxs-lookup"><span data-stu-id="b2a91-126">When the value is `true`, the statement following the `if` executes.</span></span> <span data-ttu-id="b2a91-127">V opačném případě se přeskočí.</span><span class="sxs-lookup"><span data-stu-id="b2a91-127">Otherwise, it is skipped.</span></span>


    <span data-ttu-id="b2a91-128">Tento proces kontroly podmínek a provádění příkazů založených na těchto podmínkách je velmi výkonný.</span><span class="sxs-lookup"><span data-stu-id="b2a91-128">This process of checking conditions and executing statements based on those conditions is very powerful.</span></span> <span data-ttu-id="b2a91-129">Pojďme prozkoumat víc.</span><span class="sxs-lookup"><span data-stu-id="b2a91-129">Let's explore more.</span></span>


    > [!NOTE]

    > <span data-ttu-id="b2a91-130">Toto online prostředí kódování je v režimu náhledu.</span><span class="sxs-lookup"><span data-stu-id="b2a91-130">This online coding experience is in preview mode.</span></span> <span data-ttu-id="b2a91-131">Pokud narazíte na problémy, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="b2a91-131">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="b2a91-132">Nastavit, zda a jinak spolupracovat</span><span class="sxs-lookup"><span data-stu-id="b2a91-132">Make if and else work together</span></span>
  durationInMinutes: 10
  content: "\n<span data-ttu-id=\"b2a91-133\">Chcete-li spustit jiný kód v větvích true i false, vytvořte `else` větev, která se spustí, když je podmínka nepravdivá.</span><span class=\"sxs-lookup\"><span data-stu-id=\"b2a91-133\">To execute different code in both the true and false branches, you create an `else` branch that executes when the condition is false.</span></span> <span data-ttu-id=\"b2a91-134\">Zkuste tohle:</span><span class=\"sxs-lookup\"><span data-stu-id=\"b2a91-134\">Try this:</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10\");\nelse\n    Console.WriteLine(\"The answer is not greater than 10\");\n```\n\n<span data-ttu-id=\"b2a91-135\">Příkaz následující `else` za klíčovým slovem se spustí pouze v případě, `false`že podmínka je testována.</span><span class=\"sxs-lookup\"><span data-stu-id=\"b2a91-135\">The statement following the `else` keyword executes only when the condition being tested is `false`.</span></span> <span data-ttu-id=\"b2a91-136\">`if` Kombinování `else` a s logickými podmínkami poskytuje veškerou sílu, kterou potřebujete.</span><span class=\"sxs-lookup\"><span data-stu-id=\"b2a91-136\">Combining `if` and `else` with boolean conditions provides all the power you need.</span></span>\n\n> [!IMPORTANT]\n> <span data-ttu-id=\"b2a91-137\">Odsazení pod `if` příkazy a `else` je pro lidské čtenáře.</span><span class=\"sxs-lookup\"><span data-stu-id=\"b2a91-137\">The indentation under the `if` and `else` statements is for human readers.</span></span>\n> <span data-ttu-id=\"b2a91-138\">C# Jazyk nezpracovává odsazení ani prázdné znaky jako významné.</span><span class=\"sxs-lookup\"><span data-stu-id=\"b2a91-138\">The C# language doesn't treat indentation or white space as significant.</span></span>\n> <span data-ttu-id=\"b2a91-139\">Příkaz následující `if` za klíčovým `else` slovem nebo se spustí na základě podmínky.</span><span class=\"sxs-lookup\"><span data-stu-id=\"b2a91-139\">The statement following the `if` or `else` keyword will be executed based on the condition.</span></span> <span data-ttu-id=\"b2a91-140\">Všechny ukázky v tomto kurzu se řídí běžným postupem odsazení řádků na základě toku řízení příkazů.</span><span class=\"sxs-lookup\"><span data-stu-id=\"b2a91-140\">All the samples in this tutorial follow a common practice to indent lines based on the control flow of statements.</span></span>\n\n<span data-ttu-id=\"b2a91-141\">Vzhledem k tomu, že odsazení není důležité, je nutné `{` použít `}` a k označení, zda chcete, aby bylo více než jeden příkaz součástí bloku, který je spuštěn podmíněně.</span><span class=\"sxs-lookup\"><span data-stu-id=\"b2a91-141\">Because indentation is not significant, you need to use `{` and `}` to indicate when you want more than one statement to be part of the block that executes conditionally.</span></span> <span data-ttu-id=\"b2a91-142\">C#programátoři obvykle používají tyto složené závorky u `if` všech `else` klauzulí a.</span><span class=\"sxs-lookup\"><span data-stu-id=\"b2a91-142\">C# programmers typically use those braces on all `if` and `else` clauses.</span></span> <span data-ttu-id=\"b2a91-143\">Následující příklad je stejný jako ten, který jste právě vytvořili.</span><span class=\"sxs-lookup\"><span data-stu-id=\"b2a91-143\">The following example is the same as what you just created.</span></span> <span data-ttu-id=\"b2a91-144\">Zkuste to.</span><span class=\"sxs-lookup\"><span data-stu-id=\"b2a91-144\">Try it.</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n}\n```\n\n> [!TIP]\n> <span data-ttu-id=\"b2a91-145\">Ve zbývající části tohoto kurzu obsahuje ukázka kódu všechny složené závorky, a to po přijatých postupech.</span><span class=\"sxs-lookup\"><span data-stu-id=\"b2a91-145\">Through the rest of this tutorial, the code samples all include the braces, following accepted practices.</span></span>\n\n<span data-ttu-id=\"b2a91-146\">Můžete testovat složitější podmínky:</span><span class=\"sxs-lookup\"><span data-stu-id=\"b2a91-146\">You can test more complicated conditions:</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) && (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"And the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"Or the first number is not equal to the second\");\n}\n```\n\n<span data-ttu-id=\"b2a91-147\">Testy symbolů pro *rovnost.* `==`</span><span class=\"sxs-lookup\"><span data-stu-id=\"b2a91-147\">The `==` symbol tests for *equality*.</span></span> <span data-ttu-id=\"b2a91-148\">Použití `==` rozlišuje test pro rovnost z přiřazení, které jste viděli v `a = 5`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"b2a91-148\">Using `==` distinguishes the test for equality from assignment, which you saw in `a = 5`.</span></span>\n\n<span data-ttu-id=\"b2a91-149\">`&&` Představuje \"a\".</span><span class=\"sxs-lookup\"><span data-stu-id=\"b2a91-149\">The `&&` represents \"and\".</span></span> <span data-ttu-id=\"b2a91-150\">To znamená, že obě podmínky musí mít hodnotu true, aby se příkaz spustil ve větvi true.</span><span class=\"sxs-lookup\"><span data-stu-id=\"b2a91-150\">It means both conditions must be true to execute the statement in the true branch.</span></span>  <span data-ttu-id=\"b2a91-151\">Tyto příklady také ukazují, že můžete mít více příkazů v každé podmíněných větvích za předpokladu, `{` že `}`jsou uzavřeny v a.</span><span class=\"sxs-lookup\"><span data-stu-id=\"b2a91-151\">These examples also show that you can have multiple statements in each conditional branch, provided you enclose them in `{` and `}`.</span></span>\n\n<span data-ttu-id=\"b2a91-152\">Můžete také použít `||` k reprezentaci \"nebo\":</span><span class=\"sxs-lookup\"><span data-stu-id=\"b2a91-152\">You can also use  `||` to represent \"or\":</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) || (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"Or the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"And the first number is not equal to the second\");\n}\n```\n\n<span data-ttu-id=\"b2a91-153\">Umožňuje `a`upravit hodnoty `||` , `b`a `c` a přepínat mezi `&&` a a prozkoumat.</span><span class=\"sxs-lookup\"><span data-stu-id=\"b2a91-153\">Modify the values of `a`, `b`, and `c` and switch between `&&` and `||` to explore.</span></span> <span data-ttu-id=\"b2a91-154\">Získáte lepší znalosti o tom, jak `&&` operátory a `||` fungují.</span><span class=\"sxs-lookup\"><span data-stu-id=\"b2a91-154\">You'll gain more understanding of how the `&&` and `||` operators work.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"b2a91-155\">Toto online prostředí kódování je v režimu náhledu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"b2a91-155\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"b2a91-156\">Pokud narazíte na problémy, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"b2a91-156\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="b2a91-157">Opakování operací pomocí smyček</span><span class="sxs-lookup"><span data-stu-id="b2a91-157">Use loops to repeat operations</span></span>
  durationInMinutes: 6
  content: >
    <span data-ttu-id="b2a91-158">Dalším důležitým konceptem vytvoření většího programu jsou **smyčky**.</span><span class="sxs-lookup"><span data-stu-id="b2a91-158">Another important concept to create larger programs is **loops**.</span></span> <span data-ttu-id="b2a91-159">Pomocí smyček zopakujete příkazy, které chcete spustit více než jednou.</span><span class="sxs-lookup"><span data-stu-id="b2a91-159">You'll use loops to repeat statements that you want executed more than once.</span></span> <span data-ttu-id="b2a91-160">Vyzkoušení tohoto kódu v interaktivním okně:</span><span class="sxs-lookup"><span data-stu-id="b2a91-160">Try this code in the interactive window:</span></span>


    ```csharp

    int counter = 0;

    while (counter < 10)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    }

    ```


    <span data-ttu-id="b2a91-161">Příkaz zkontroluje podmínku a provede příkaz `while`za. `while`</span><span class="sxs-lookup"><span data-stu-id="b2a91-161">The `while` statement checks a condition and executes the statement following the `while`.</span></span> <span data-ttu-id="b2a91-162">Zopakuje kontrolu podmínky a spustí tyto příkazy, dokud není podmínka pravdivá.</span><span class="sxs-lookup"><span data-stu-id="b2a91-162">It will repeat checking the condition and executing those statements until the condition is false.</span></span>


    <span data-ttu-id="b2a91-163">V tomto příkladu je druhý operátor New.</span><span class="sxs-lookup"><span data-stu-id="b2a91-163">There's one other new operator in this example.</span></span> <span data-ttu-id="b2a91-164">Po proměnné je operátor **přírůstku.** `++` `counter`</span><span class="sxs-lookup"><span data-stu-id="b2a91-164">The `++` after the `counter` variable is the **increment** operator.</span></span> <span data-ttu-id="b2a91-165">Přičte 1 k hodnotě čítače a uloží tuto hodnotu do proměnné čítače.</span><span class="sxs-lookup"><span data-stu-id="b2a91-165">It adds 1 to the value of counter, and stores that value in the counter variable.</span></span>


    > [!IMPORTANT]

    > <span data-ttu-id="b2a91-166">Ujistěte se, že `while` podmínka smyčky při spuštění kódu přepne na false.</span><span class="sxs-lookup"><span data-stu-id="b2a91-166">Make sure that the `while` loop condition does switch to false as you execute the code.</span></span> <span data-ttu-id="b2a91-167">V opačném případě vytvoříte **nekonečnou smyčku** , ve které program nikdy nekončí.</span><span class="sxs-lookup"><span data-stu-id="b2a91-167">Otherwise, you create an **infinite loop** where your program never ends.</span></span> <span data-ttu-id="b2a91-168">Nepovedlo se to ukázat, protože modul, který spouští váš kód, vyprší časový limit a nebudete mít k dispozici žádný výstup z programu.</span><span class="sxs-lookup"><span data-stu-id="b2a91-168">Let's not demonstrate that, because the engine that runs your code will time out and you'll see no output from your program.</span></span>


    <span data-ttu-id="b2a91-169">Smyčka testuje podmínku před spuštěním kódu `while`za. `while`</span><span class="sxs-lookup"><span data-stu-id="b2a91-169">The `while` loop tests the condition before executing the code following the `while`.</span></span> <span data-ttu-id="b2a91-170">`do` ... `while` smyčka nejprve spustí kód a poté zkontroluje podmínku.</span><span class="sxs-lookup"><span data-stu-id="b2a91-170">The `do` ... `while` loop executes the code first, and then checks the condition.</span></span> <span data-ttu-id="b2a91-171">Vypadá takto:</span><span class="sxs-lookup"><span data-stu-id="b2a91-171">It looks like this:</span></span>


    ```csharp

    int counter = 0;

    do

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    } while (counter < 10);

    ```


    <span data-ttu-id="b2a91-172">Tato `do` smyčka a předchozí `while` smyčka fungují stejně.</span><span class="sxs-lookup"><span data-stu-id="b2a91-172">This `do` loop and the earlier `while` loop work the same.</span></span>


    <span data-ttu-id="b2a91-173">Pojďme přejít k jednomu poslednímu příkazu Loop.</span><span class="sxs-lookup"><span data-stu-id="b2a91-173">Let's move on to one last loop statement.</span></span>


    > [!NOTE]

    > <span data-ttu-id="b2a91-174">Toto online prostředí kódování je v režimu náhledu.</span><span class="sxs-lookup"><span data-stu-id="b2a91-174">This online coding experience is in preview mode.</span></span> <span data-ttu-id="b2a91-175">Pokud narazíte na problémy, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="b2a91-175">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="b2a91-176">Práce s cyklem for</span><span class="sxs-lookup"><span data-stu-id="b2a91-176">Work with the for loop</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="b2a91-177">Dalším příkazem běžné smyčky, který se zobrazí v C# kódu, je `for` smyčka.</span><span class="sxs-lookup"><span data-stu-id="b2a91-177">Another common loop statement that you'll see in C# code is the `for` loop.</span></span> <span data-ttu-id="b2a91-178">Vyzkoušení tohoto kódu v interaktivním okně:</span><span class="sxs-lookup"><span data-stu-id="b2a91-178">Try this code in the interactive window:</span></span>


    ```csharp

    for(int counter = 0; counter < 10; counter++)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
    }

    ```


    <span data-ttu-id="b2a91-179">To funguje stejně jako `while` smyčka `do` a smyčka, kterou jste už použili.</span><span class="sxs-lookup"><span data-stu-id="b2a91-179">This does the same work as the `while` loop and the `do` loop you've already used.</span></span> <span data-ttu-id="b2a91-180">`for` Příkaz má tři části, které řídí, jak to funguje.</span><span class="sxs-lookup"><span data-stu-id="b2a91-180">The `for` statement has three parts that control how it works.</span></span>


    <span data-ttu-id="b2a91-181">První část je **pro inicializátor inicializátoru**: `int counter = 0;` deklaruje, že `counter` je proměnná smyčky, a nastaví její počáteční hodnotu na `0`.</span><span class="sxs-lookup"><span data-stu-id="b2a91-181">The first part is the **for initializer**: `int counter = 0;` declares that `counter` is the loop variable, and sets its initial value to `0`.</span></span>


    <span data-ttu-id="b2a91-182">Střední část je **pro podmínku**: `counter < 10` deklaruje, že se tato `for` smyčka pokračuje, dokud hodnota čítače není menší než 10.</span><span class="sxs-lookup"><span data-stu-id="b2a91-182">The middle part is the **for condition**: `counter < 10` declares that this `for` loop continues to execute as long as the value of counter is less than 10.</span></span>


    <span data-ttu-id="b2a91-183">Poslední část je **for iterátor**: `counter++` určuje, jak se má změnit proměnná smyčky po provedení bloku `for` po příkazu.</span><span class="sxs-lookup"><span data-stu-id="b2a91-183">The final part is the **for iterator**: `counter++` specifies how to modify the loop variable after executing the block following the `for` statement.</span></span> <span data-ttu-id="b2a91-184">V tomto případě určuje, `counter` že se má při každém spuštění bloku zvýšit o 1.</span><span class="sxs-lookup"><span data-stu-id="b2a91-184">Here, it specifies that `counter` should be incremented by 1 each time the block executes.</span></span>


    <span data-ttu-id="b2a91-185">Vyzkoušejte si je sami.</span><span class="sxs-lookup"><span data-stu-id="b2a91-185">Experiment with these yourself.</span></span> <span data-ttu-id="b2a91-186">Vyzkoušejte následující:</span><span class="sxs-lookup"><span data-stu-id="b2a91-186">Try each of the following:</span></span>


    - <span data-ttu-id="b2a91-187">Změňte inicializátor tak, aby začínal na jiné hodnotě.</span><span class="sxs-lookup"><span data-stu-id="b2a91-187">Change the initializer to start at a different value.</span></span>

    - <span data-ttu-id="b2a91-188">Změňte podmínku tak, aby se zastavila s jinou hodnotou.</span><span class="sxs-lookup"><span data-stu-id="b2a91-188">Change the condition to stop at a different value.</span></span>


    <span data-ttu-id="b2a91-189">Až to budete mít, pojďme přejít k tomu, abyste si sami napsali kód, abyste mohli používat, co jste se naučili.</span><span class="sxs-lookup"><span data-stu-id="b2a91-189">When you're done, let's move on to write some code yourself to use what you've learned.</span></span>


    > [!NOTE]

    > <span data-ttu-id="b2a91-190">Toto online prostředí kódování je v režimu náhledu.</span><span class="sxs-lookup"><span data-stu-id="b2a91-190">This online coding experience is in preview mode.</span></span> <span data-ttu-id="b2a91-191">Pokud narazíte na problémy, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="b2a91-191">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="b2a91-192">Kombinování větví a smyček</span><span class="sxs-lookup"><span data-stu-id="b2a91-192">Combine branches and loops</span></span>
  durationInMinutes: 12
  content: >
    <span data-ttu-id="b2a91-193">Teď, když jste viděli `if` příkaz a konstruktory cyklů v C# jazyce, se podívejte, jestli můžete napsat C# kód, abyste našli součet všech celých čísel od 1 do 20, která jsou dělitelná 3.</span><span class="sxs-lookup"><span data-stu-id="b2a91-193">Now that you've seen the `if` statement and the looping constructs in the C# language, see if you can write C# code to find the sum of all integers 1 through 20 that are divisible by 3.</span></span>  <span data-ttu-id="b2a91-194">Tady je několik tipů:</span><span class="sxs-lookup"><span data-stu-id="b2a91-194">Here are a few hints:</span></span>


    - <span data-ttu-id="b2a91-195">`%` Operátor poskytuje zbytek operace dělení.</span><span class="sxs-lookup"><span data-stu-id="b2a91-195">The `%` operator gives you the remainder of a division operation.</span></span>

    - <span data-ttu-id="b2a91-196">`if` Příkaz poskytuje podmínku pro zjištění, zda číslo by mělo být součástí součtu.</span><span class="sxs-lookup"><span data-stu-id="b2a91-196">The `if` statement gives you the condition to see if a number should be part of the sum.</span></span>

    - <span data-ttu-id="b2a91-197">`for` Smyčka vám může pomáhat zopakovat řadu kroků pro všechna čísla od 1 do 20.</span><span class="sxs-lookup"><span data-stu-id="b2a91-197">The `for` loop can help you repeat a series of steps for all the numbers 1 through 20.</span></span>


    <span data-ttu-id="b2a91-198">Vyzkoušejte si to sami.</span><span class="sxs-lookup"><span data-stu-id="b2a91-198">Try it yourself.</span></span> <span data-ttu-id="b2a91-199">Potom zkontrolujte, jak jste to provedli.</span><span class="sxs-lookup"><span data-stu-id="b2a91-199">Then check how you did.</span></span> <span data-ttu-id="b2a91-200">Jako pomocný parametr byste měli pro odpověď získat 63.</span><span class="sxs-lookup"><span data-stu-id="b2a91-200">As a hint, you should get 63 for an answer.</span></span>


    > [!NOTE]

    > <span data-ttu-id="b2a91-201">Toto online prostředí kódování je v režimu náhledu.</span><span class="sxs-lookup"><span data-stu-id="b2a91-201">This online coding experience is in preview mode.</span></span> <span data-ttu-id="b2a91-202">Pokud narazíte na problémy, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="b2a91-202">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="b2a91-203">Dokončení výzvy</span><span class="sxs-lookup"><span data-stu-id="b2a91-203">Complete challenge</span></span>
  durationInMinutes: 1
  content: >
    <span data-ttu-id="b2a91-204">Pracovali jste s podobným způsobem?</span><span class="sxs-lookup"><span data-stu-id="b2a91-204">Did you come up with something like this?</span></span>


    ```csharp

    int sum = 0;

    for (int number = 1; number < 21; number++)

    {
      if (number % 3 == 0)
      {
        sum = sum + number;
      }
    }

    Console.WriteLine($"The sum is {sum}");

    ```


    > [!NOTE]

    > <span data-ttu-id="b2a91-205">Toto online prostředí kódování je v režimu náhledu.</span><span class="sxs-lookup"><span data-stu-id="b2a91-205">This online coding experience is in preview mode.</span></span> <span data-ttu-id="b2a91-206">Pokud narazíte na problémy, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="b2a91-206">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="b2a91-207">Blahopřejeme!</span><span class="sxs-lookup"><span data-stu-id="b2a91-207">Congratulations!</span></span>
  content: >-
    <span data-ttu-id="b2a91-208">Dokončili jste Interaktivní kurz větve a smyček.</span><span class="sxs-lookup"><span data-stu-id="b2a91-208">You've completed the "branches and loops" interactive tutorial.</span></span> <span data-ttu-id="b2a91-209">Kliknutím na odkaz **kolekce seznamu** níže můžete spustit další interaktivní kurz, nebo můžete navštívit [Web .net](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) a stáhnout .NET Core SDK, vytvořit projekt na počítači a zachovat kódování.</span><span class="sxs-lookup"><span data-stu-id="b2a91-209">You can click the **list collection** link below to start the next interactive tutorial, or you can visit the [.NET site](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) to download the .NET Core SDK, create a project on your machine, and keep coding.</span></span> <span data-ttu-id="b2a91-210">Oddíl "další kroky" vás převede zpět na tyto kurzy.</span><span class="sxs-lookup"><span data-stu-id="b2a91-210">The "Next steps" section brings you back to these tutorials.</span></span>


    <span data-ttu-id="b2a91-211">Další informace o těchto konceptech najdete v těchto tématech:</span><span class="sxs-lookup"><span data-stu-id="b2a91-211">You can learn more about these concepts in these topics:</span></span>


    - [<span data-ttu-id="b2a91-212">IF a else – příkaz</span><span class="sxs-lookup"><span data-stu-id="b2a91-212">If and else statement</span></span>](../../language-reference/keywords/if-else.md)

    - [<span data-ttu-id="b2a91-213">While – příkaz</span><span class="sxs-lookup"><span data-stu-id="b2a91-213">While statement</span></span>](../../language-reference/keywords/while.md)

    - [<span data-ttu-id="b2a91-214">Do – příkaz</span><span class="sxs-lookup"><span data-stu-id="b2a91-214">Do statement</span></span>](../../language-reference/keywords/do.md)

    - [<span data-ttu-id="b2a91-215">Příkaz for</span><span class="sxs-lookup"><span data-stu-id="b2a91-215">For statement</span></span>](../../language-reference/keywords/for.md)
