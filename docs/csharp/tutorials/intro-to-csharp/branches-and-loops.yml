### YamlMime:Tutorial
title: <span data-ttu-id="ed5d3-101">Další podmíněnou logiku s příkazy větve a smyčky</span><span class="sxs-lookup"><span data-stu-id="ed5d3-101">Learn conditional logic with branch and loop statements</span></span>
metadata:
  title: Větve a smyčky – Úvod do C# Interaktivní kurz
  description: V tomto kurzu o větvích a smyčkách se budete pomocí prohlížeče učit C# interaktivně. Budete psát kód v C# a zobrazovat výsledky kompilace a spuštění prohlédnete přímo v prohlížeči.
  audience: Developer
  level: Beginner
  ms.custom: mvc
  ms.date: 08/24/2018
  displayType: two-column
  interactive: csharp
  nextTutorialHref: interpolated-strings.yml
  nextTutorialTitle: <span data-ttu-id="ed5d3-105">Interpolace řetězců v jazyce C#</span><span class="sxs-lookup"><span data-stu-id="ed5d3-105">String interpolation in C#</span></span>
  ms.openlocfilehash: bb539fe50ee6cc2d45a44e3742072059a990c2aa
  ms.sourcegitcommit: 3b9b7ae6771712337d40374d2fef6b25b0d53df6
  ms.translationtype: MT
  ms.contentlocale: cs-CZ
  ms.lasthandoff: 01/04/2019
  ms.locfileid: "54030227"
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="ed5d3-106">V tomto kurzu se naučíte, jak napsat kód, který vyhodnocuje proměnné a na jejich základě mění cestu provedení.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-106">This tutorial teaches you how to write code that examines variables and changes execution path based on those variables.</span></span> <span data-ttu-id="ed5d3-107">Zápis C# interaktivně a zobrazovat výsledky kompilace a spuštění kódu budete pomocí svého prohlížeče.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-107">You'll use your browser to write C# interactively and see the results of compiling and running your code.</span></span> <span data-ttu-id="ed5d3-108">Tento kurz obsahuje sérii lekcí, které probírají konstrukty v větvení a smyček C#.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-108">This tutorial contains a series of lessons that explore branching and looping constructs in C#.</span></span> <span data-ttu-id="ed5d3-109">Tato lekce vás naučí základy jazyka C#.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-109">These lessons teach you the fundamentals of the C# language.</span></span>
- title: <span data-ttu-id="ed5d3-110">Rozhodování pomocí příkazu if – příkaz</span><span class="sxs-lookup"><span data-stu-id="ed5d3-110">Make decisions using the if statement</span></span>
  durationInMinutes: 4
  content: >
    <span data-ttu-id="ed5d3-111">Spusťte v interaktivním okně následující kód.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-111">Run the following code in the interactive window.</span></span> <span data-ttu-id="ed5d3-112">K tomu, zadejte do interaktivního okna následující blok kódu a klikněte na tlačítko **spustit** tlačítka:</span><span class="sxs-lookup"><span data-stu-id="ed5d3-112">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>


    ```csharp

    int a = 5;

    int b = 6;

    if (a + b > 10)
        Console.WriteLine("The answer is greater than 10.");
    ```


    <span data-ttu-id="ed5d3-113">Upravte deklaraci `b` tak, aby součet je menší než 10:</span><span class="sxs-lookup"><span data-stu-id="ed5d3-113">Modify the declaration of `b` so that the sum is less than 10:</span></span>


    ```csharp

    int b = 3;

    ```


    <span data-ttu-id="ed5d3-114">Klikněte na tlačítko **spustit** tlačítko znovu.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-114">Click the **Run** button again.</span></span> <span data-ttu-id="ed5d3-115">Protože odpověď je menší než 10, nic se nevytiskne.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-115">Because the answer is less than 10, nothing is printed.</span></span> <span data-ttu-id="ed5d3-116">**Podmínku** jste testování má hodnotu false.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-116">The **condition** you're testing is false.</span></span> <span data-ttu-id="ed5d3-117">Nemáte žádný kód spustit, protože jste zatím napsali jenom jednu z možných větví `if` – příkaz: větev pro splnění podmínky.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-117">You don't have any code to execute because you've only written one of the possible branches for an `if` statement: the true branch.</span></span>


    > [!TIP]

    > <span data-ttu-id="ed5d3-118">Když se budete učit, C# (nebo libovolným programovacím jazykem), budete se při psaní kódu dělat chyby.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-118">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id="ed5d3-119">**Kompilátoru** se tyto chyby odhalí a dejte nám o nich na vás.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-119">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id="ed5d3-120">Pokud výstup obsahuje chybové zprávy, prohlédněte si blíže ukázkový kód a kód v interaktivním okně, abyste zjistili, co je opravit.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-120">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>

    > <span data-ttu-id="ed5d3-121">Toto cvičení vám pomůže seznámit se se strukturou kódu jazyka C#.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-121">That exercise will help you learn the structure of C# code.</span></span>


    <span data-ttu-id="ed5d3-122">Tento první příklad ukazuje sílu příkazu `if` a logických typů.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-122">This first sample shows the power of `if` and boolean types.</span></span> <span data-ttu-id="ed5d3-123">A *logická* je proměnná, která může mít jednu ze dvou hodnot: `true` nebo `false`.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-123">A *boolean* is a variable that can have one of two values: `true` or `false`.</span></span> <span data-ttu-id="ed5d3-124">C# definuje speciální typ `bool` pro proměnné typu boolean.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-124">C# defines a special type, `bool` for boolean variables.</span></span> <span data-ttu-id="ed5d3-125">`if` Příkaz zkontroluje hodnotu vlastnosti `bool`.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-125">The `if` statement checks the value of a `bool`.</span></span> <span data-ttu-id="ed5d3-126">Pokud je hodnotou `true`, příkazu za příkazem `if` spustí.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-126">When the value is `true`, the statement following the `if` executes.</span></span> <span data-ttu-id="ed5d3-127">V opačném případě se přeskočí.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-127">Otherwise, it is skipped.</span></span>


    <span data-ttu-id="ed5d3-128">Tento proces kontroly podmínek a provádění příkazů na základě těchto podmínek je velmi výkonné.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-128">This process of checking conditions and executing statements based on those conditions is very powerful.</span></span> <span data-ttu-id="ed5d3-129">Podívejme se na další.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-129">Let's explore more.</span></span>


    > [!NOTE]

    > <span data-ttu-id="ed5d3-130">Toto online kódovací prostředí je v režimu náhledu.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-130">This online coding experience is in preview mode.</span></span> <span data-ttu-id="ed5d3-131">Pokud narazíte na potíže, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="ed5d3-131">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="ed5d3-132">If a else spolupracují</span><span class="sxs-lookup"><span data-stu-id="ed5d3-132">Make if and else work together</span></span>
  durationInMinutes: 10
  content: "\n<span data-ttu-id=\"ed5d3-133\">Chcete-li ve větvích true a false provést různý kód, vytvoříte `else` větev, která se provede, když podmínka není splněna.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ed5d3-133\">To execute different code in both the true and false branches, you create an `else` branch that executes when the condition is false.</span></span> <span data-ttu-id=\"ed5d3-134\">Zkuste tohle:</span><span class=\"sxs-lookup\"><span data-stu-id=\"ed5d3-134\">Try this:</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10\");\nelse\n    Console.WriteLine(\"The answer is not greater than 10\");\n```\n\n<span data-ttu-id=\"ed5d3-135\">Následující příkaz `else` – klíčové slovo provede pouze, pokud je testovaná podmínka `false`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ed5d3-135\">The statement following the `else` keyword executes only when the condition being tested is `false`.</span></span> <span data-ttu-id=\"ed5d3-136\">Kombinování `if` a `else` s logickými podmínkami poskytuje veškerou sílu, budete potřebovat.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ed5d3-136\">Combining `if` and `else` with boolean conditions provides all the power you need.</span></span>\n\n> [!IMPORTANT]\n> <span data-ttu-id=\"ed5d3-137\">Důvodem odsazení pod `if` a `else` příkazy je snadnější čtení pro uživatele.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ed5d3-137\">The indentation under the `if` and `else` statements is for human readers.</span></span>\n> <span data-ttu-id=\"ed5d3-138\">Jazyk C# nepovažuje odsazení a mezery za významné.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ed5d3-138\">The C# language doesn't treat indentation or white space as significant.</span></span>\n> <span data-ttu-id=\"ed5d3-139\">Následující příkaz `if` nebo `else` – klíčové slovo se spustí na základě podmínky.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ed5d3-139\">The statement following the `if` or `else` keyword will be executed based on the condition.</span></span> <span data-ttu-id=\"ed5d3-140\">Všechny ukázky v tomto kurzu dodržují běžnou praxi odsazování řádků podle toku řízení příkazů.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ed5d3-140\">All the samples in this tutorial follow a common practice to indent lines based on the control flow of statements.</span></span>\n\n<span data-ttu-id=\"ed5d3-141\">Protože odsazení není významné, je třeba použít `{` a `}` označte, když má více než jeden výraz jako součást podmíněně prováděného bloku.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ed5d3-141\">Because indentation is not significant, you need to use `{` and `}` to indicate when you want more than one statement to be part of the block that executes conditionally.</span></span> <span data-ttu-id=\"ed5d3-142\">Programátoři v C# obvykle používají tyto složené závorky ve všech `if` a `else` klauzule.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ed5d3-142\">C# programmers typically use those braces on all `if` and `else` clauses.</span></span> <span data-ttu-id=\"ed5d3-143\">Následující příklad je stejný jako co jste právě vytvořili.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ed5d3-143\">The following example is the same as what you just created.</span></span> <span data-ttu-id=\"ed5d3-144\">Vyzkoušejte si to.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ed5d3-144\">Try it.</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n}\n```\n\n> [!TIP]\n> <span data-ttu-id=\"ed5d3-145\">Postupujte podle zbývajících kroků v tomto kurzu, patří ukázky složené závorky podle přijaté praxe.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ed5d3-145\">Through the rest of this tutorial, the code samples all include the braces, following accepted practices.</span></span>\n\n<span data-ttu-id=\"ed5d3-146\">Můžete testovat složitější podmínky:</span><span class=\"sxs-lookup\"><span data-stu-id=\"ed5d3-146\">You can test more complicated conditions:</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) && (a > b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"And the first number is greater than the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"Or the first number is not greater than the second\");\n}\n```\n\n<span data-ttu-id=\"ed5d3-147\">`&&` Představuje \"a\".</span><span class=\"sxs-lookup\"><span data-stu-id=\"ed5d3-147\">The `&&` represents \"and\".</span></span> <span data-ttu-id=\"ed5d3-148\">Znamená to, že obě podmínky musí mít hodnotu true, má provést větev true.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ed5d3-148\">It means both conditions must be true to execute the statement in the true branch.</span></span>  <span data-ttu-id=\"ed5d3-149\">Tyto příklady také ukazují, že můžete mít více příkazů v každé podmíněné větvi, je v uzavřete `{` a `}`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ed5d3-149\">These examples also show that you can have multiple statements in each conditional branch, provided you enclose them in `{` and `}`.</span></span>\n\n<span data-ttu-id=\"ed5d3-150\">Můžete také použít `||` představující \"nebo\":</span><span class=\"sxs-lookup\"><span data-stu-id=\"ed5d3-150\">You can also use  `||` to represent \"or\":</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) || (a > b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"Or the first number is greater than the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"And the first number is not greater than the second\");\n}\n```\n\n> [!NOTE]\n> <span data-ttu-id=\"ed5d3-151\">Toto online kódovací prostředí je v režimu náhledu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ed5d3-151\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"ed5d3-152\">Pokud narazíte na potíže, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"ed5d3-152\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="ed5d3-153">Použití smyček k opakování operací</span><span class="sxs-lookup"><span data-stu-id="ed5d3-153">Use loops to repeat operations</span></span>
  durationInMinutes: 6
  content: >
    <span data-ttu-id="ed5d3-154">Dalším důležitým konceptem pro vytváření větších programů je **smyčky**.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-154">Another important concept to create larger programs is **loops**.</span></span> <span data-ttu-id="ed5d3-155">Smyčky použijete k opakování příkazů, které chcete provést víckrát než jednou.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-155">You'll use loops to repeat statements that you want executed more than once.</span></span> <span data-ttu-id="ed5d3-156">Vyzkoušejte tento kód v interaktivním okně:</span><span class="sxs-lookup"><span data-stu-id="ed5d3-156">Try this code in the interactive window:</span></span>


    ```csharp

    int counter = 0;

    while (counter < 10)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    }

    ```


    <span data-ttu-id="ed5d3-157">`while` Příkaz zkontroluje podmínku a provede příkaz následující `while`.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-157">The `while` statement checks a condition and executes the statement following the `while`.</span></span> <span data-ttu-id="ed5d3-158">Bude opakovaně kontrolovat podmínku a provádět příkaz, dokud podmínka není splněna.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-158">It will repeat checking the condition and executing those statements until the condition is false.</span></span>


    <span data-ttu-id="ed5d3-159">V tomto příkladu je jeden nový operátor.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-159">There's one other new operator in this example.</span></span> <span data-ttu-id="ed5d3-160">`++` Po `counter` proměnná je **přírůstek** operátor.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-160">The `++` after the `counter` variable is the **increment** operator.</span></span> <span data-ttu-id="ed5d3-161">Přičte 1 k hodnotě čítače a uloží hodnotu do proměnné counter.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-161">It adds 1 to the value of counter, and stores that value in the counter variable.</span></span>


    > [!IMPORTANT]

    > <span data-ttu-id="ed5d3-162">Ujistěte se, že `while` smyčku přepne na false, při spuštění kódu.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-162">Make sure that the `while` loop condition does switch to false as you execute the code.</span></span> <span data-ttu-id="ed5d3-163">V opačném případě můžete vytvořit **nekonečná smyčka** kde program nikdy neskončí.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-163">Otherwise, you create an **infinite loop** where your program never ends.</span></span> <span data-ttu-id="ed5d3-164">Není přiblížíme, protože modul, který spustí váš kód bude vypršení časového limitu a uvidíte žádný výstup z programu.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-164">Let's not demonstrate that, because the engine that runs your code will time out and you'll see no output from your program.</span></span>


    <span data-ttu-id="ed5d3-165">`while` Smyčky otestuje podmínku před spuštěním kódu, který následuje `while`.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-165">The `while` loop tests the condition before executing the code following the `while`.</span></span> <span data-ttu-id="ed5d3-166">`do` ... `while` smyčky nejdřív spustí kód a potom zkontrolujte tuto podmínku.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-166">The `do` ... `while` loop executes the code first, and then checks the condition.</span></span> <span data-ttu-id="ed5d3-167">Vypadá takto:</span><span class="sxs-lookup"><span data-stu-id="ed5d3-167">It looks like this:</span></span>


    ```csharp

    int counter = 0;

    do

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    } while (counter < 10);

    ```


    <span data-ttu-id="ed5d3-168">To `do` smyčky a dřívější `while` smyčky fungují stejně.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-168">This `do` loop and the earlier `while` loop work the same.</span></span>


    <span data-ttu-id="ed5d3-169">Teď přejdeme k poslednímu příkazu smyčky.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-169">Let's move on to one last loop statement.</span></span>


    > [!NOTE]

    > <span data-ttu-id="ed5d3-170">Toto online kódovací prostředí je v režimu náhledu.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-170">This online coding experience is in preview mode.</span></span> <span data-ttu-id="ed5d3-171">Pokud narazíte na potíže, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="ed5d3-171">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="ed5d3-172">Práce s smyčka for</span><span class="sxs-lookup"><span data-stu-id="ed5d3-172">Work with the for loop</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="ed5d3-173">Dalím běžným příkazem smyčky, která se zobrazí v kódu jazyka C# je `for` smyčky.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-173">Another common loop statement that you'll see in C# code is the `for` loop.</span></span> <span data-ttu-id="ed5d3-174">Vyzkoušejte tento kód v interaktivním okně:</span><span class="sxs-lookup"><span data-stu-id="ed5d3-174">Try this code in the interactive window:</span></span>


    ```csharp

    for(int counter = 0; counter < 10; counter++)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
    }

    ```


    <span data-ttu-id="ed5d3-175">Funguje jako `while` smyčky a `do` smyčky, které jste už použili.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-175">This does the same work as the `while` loop and the `do` loop you've already used.</span></span> <span data-ttu-id="ed5d3-176">`for` Příkaz má tři části, které řídí, jak to funguje.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-176">The `for` statement has three parts that control how it works.</span></span>


    <span data-ttu-id="ed5d3-177">První část je **pro inicializátor**: `int counter = 0;` deklaruje, že `counter` je proměnná smyčky a nastavuje její počáteční hodnotu `0`.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-177">The first part is the **for initializer**: `int counter = 0;` declares that `counter` is the loop variable, and sets its initial value to `0`.</span></span>


    <span data-ttu-id="ed5d3-178">Prostřední část je **pro podmínku**: `counter < 10` deklaruje, že tento `for` smyčky pokračuje v provádění za předpokladu, hodnota čítače je menší než 10.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-178">The middle part is the **for condition**: `counter < 10` declares that this `for` loop continues to execute as long as the value of counter is less than 10.</span></span>


    <span data-ttu-id="ed5d3-179">Poslední část je **iterátoru**: `counter++` Určuje, jak upravit proměnnou smyčky po provedení bloku následujícího `for` příkazu.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-179">The final part is the **for iterator**: `counter++` specifies how to modify the loop variable after executing the block following the `for` statement.</span></span> <span data-ttu-id="ed5d3-180">V tomto poli, určuje, že `counter` měli zvyšuje o 1 při každém provedení bloku.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-180">Here, it specifies that `counter` should be incremented by 1 each time the block executes.</span></span>


    <span data-ttu-id="ed5d3-181">Vyzkoušet sami.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-181">Experiment with these yourself.</span></span> <span data-ttu-id="ed5d3-182">Vyzkoušejte všechny z následujících akcí:</span><span class="sxs-lookup"><span data-stu-id="ed5d3-182">Try each of the following:</span></span>


    - <span data-ttu-id="ed5d3-183">Změňte inicializační začínal jinou hodnotou.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-183">Change the initializer to start at a different value.</span></span>

    - <span data-ttu-id="ed5d3-184">Změňte podmínku, která má zastavit na jinou hodnotu.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-184">Change the condition to stop at a different value.</span></span>


    <span data-ttu-id="ed5d3-185">Až skončíte, přejdeme napsali kus kódu sami používat, co jste se naučili.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-185">When you're done, let's move on to write some code yourself to use what you've learned.</span></span>


    > [!NOTE]

    > <span data-ttu-id="ed5d3-186">Toto online kódovací prostředí je v režimu náhledu.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-186">This online coding experience is in preview mode.</span></span> <span data-ttu-id="ed5d3-187">Pokud narazíte na potíže, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="ed5d3-187">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="ed5d3-188">Kombinace větví a smyček</span><span class="sxs-lookup"><span data-stu-id="ed5d3-188">Combine branches and loops</span></span>
  durationInMinutes: 12
  content: >
    <span data-ttu-id="ed5d3-189">Teď, když už víte, `if` příkazu a konstruktory cyklů v jazyce C# najdete v části Pokud můžete napsat kód jazyka C# pro zjistí součet všech celých čísel od 1 do 20, která jsou dělitelná 3.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-189">Now that you've seen the `if` statement and the looping constructs in the C# language, see if you can write C# code to find the sum of all integers 1 through 20 that are divisible by 3.</span></span>  <span data-ttu-id="ed5d3-190">Tady je několik tipů:</span><span class="sxs-lookup"><span data-stu-id="ed5d3-190">Here are a few hints:</span></span>


    - <span data-ttu-id="ed5d3-191">`%` Operátor poskytuje zbytek operace dělení.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-191">The `%` operator gives you the remainder of a division operation.</span></span>

    - <span data-ttu-id="ed5d3-192">`if` Příkaz poskytuje podmínku pro zjištění, pokud se číslo by mělo být součástí tohoto součtu.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-192">The `if` statement gives you the condition to see if a number should be part of the sum.</span></span>

    - <span data-ttu-id="ed5d3-193">`for` Smyčky pomůže zopakovat sérii kroků pro všechna čísla od 1 do 20.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-193">The `for` loop can help you repeat a series of steps for all the numbers 1 through 20.</span></span>


    <span data-ttu-id="ed5d3-194">Vyzkoušejte si to sami.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-194">Try it yourself.</span></span> <span data-ttu-id="ed5d3-195">Zkontrolujte, jak jste to udělali.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-195">Then check how you did.</span></span> <span data-ttu-id="ed5d3-196">Jako Nápověda měli byste obdržet 63 pro odpověď.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-196">As a hint, you should get 63 for an answer.</span></span>


    > [!NOTE]

    > <span data-ttu-id="ed5d3-197">Toto online kódovací prostředí je v režimu náhledu.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-197">This online coding experience is in preview mode.</span></span> <span data-ttu-id="ed5d3-198">Pokud narazíte na potíže, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="ed5d3-198">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="ed5d3-199">Dokončení výzvy</span><span class="sxs-lookup"><span data-stu-id="ed5d3-199">Complete challenge</span></span>
  durationInMinutes: 1
  content: >
    <span data-ttu-id="ed5d3-200">Napsali jste kód podobný tomuto?</span><span class="sxs-lookup"><span data-stu-id="ed5d3-200">Did you come up with something like this?</span></span>


    ```csharp

    int sum = 0;

    for (int number = 1; number < 21; number++)

    {
      if (number % 3 == 0)
      {
        sum = sum + number;
      }
    }

    Console.WriteLine($"The sum is {sum}");

    ```


    > [!NOTE]

    > <span data-ttu-id="ed5d3-201">Toto online kódovací prostředí je v režimu náhledu.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-201">This online coding experience is in preview mode.</span></span> <span data-ttu-id="ed5d3-202">Pokud narazíte na potíže, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="ed5d3-202">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="ed5d3-203">Blahopřejeme!</span><span class="sxs-lookup"><span data-stu-id="ed5d3-203">Congratulations!</span></span>
  content: >-
    <span data-ttu-id="ed5d3-204">Dokončili jste kurz interaktivní "větve a smyčky".</span><span class="sxs-lookup"><span data-stu-id="ed5d3-204">You've completed the "branches and loops" interactive tutorial.</span></span> <span data-ttu-id="ed5d3-205">Můžete kliknout **interpolovaných řetězců** odkaz níže spusťte další interaktivní kurz, nebo můžete navštívit [.NET Web](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial) stáhnout .NET Core SDK, vytvořte projekt na vašem počítači a zachovat kódování.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-205">You can click the **Interpolated strings** link below to start the next interactive tutorial, or you can visit the [.NET site](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial) to download the .NET Core SDK, create a project on your machine, and keep coding.</span></span> <span data-ttu-id="ed5d3-206">Krok "Zachovat učení" přináší zpět do těchto kurzů.</span><span class="sxs-lookup"><span data-stu-id="ed5d3-206">The "Keep Learning" step brings you back to these tutorials.</span></span>


    <span data-ttu-id="ed5d3-207">Další informace o těchto konceptech v těchto tématech:</span><span class="sxs-lookup"><span data-stu-id="ed5d3-207">You can learn more about these concepts in these topics:</span></span>


    - [<span data-ttu-id="ed5d3-208">Pokud a else – příkaz</span><span class="sxs-lookup"><span data-stu-id="ed5d3-208">If and else statement</span></span>](../../language-reference/keywords/if-else.md)

    - [<span data-ttu-id="ed5d3-209">while – příkaz</span><span class="sxs-lookup"><span data-stu-id="ed5d3-209">While statement</span></span>](../../language-reference/keywords/while.md)

    - [<span data-ttu-id="ed5d3-210">do – příkaz</span><span class="sxs-lookup"><span data-stu-id="ed5d3-210">Do statement</span></span>](../../language-reference/keywords/do.md)

    - [<span data-ttu-id="ed5d3-211">For – příkaz</span><span class="sxs-lookup"><span data-stu-id="ed5d3-211">For statement</span></span>](../../language-reference/keywords/for.md)
